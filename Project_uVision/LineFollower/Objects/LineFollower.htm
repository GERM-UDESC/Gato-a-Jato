<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\LineFollower.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\LineFollower.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6090000: Last Updated: Fri Aug  9 22:20:56 2019
<BR><P>
<H3>Maximum Stack Usage =       3632 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; Line_Sensor::Line_Sensor(Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[3f]">Reset_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">NMI_Handler</a><BR>
 <LI><a href="#[5]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">HardFault_Handler</a><BR>
 <LI><a href="#[6]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">MemManage_Handler</a><BR>
 <LI><a href="#[7]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">BusFault_Handler</a><BR>
 <LI><a href="#[8]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">UsageFault_Handler</a><BR>
 <LI><a href="#[9]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SVC_Handler</a><BR>
 <LI><a href="#[a]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">DebugMon_Handler</a><BR>
 <LI><a href="#[b]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">PendSV_Handler</a><BR>
 <LI><a href="#[c]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">SysTick_Handler</a><BR>
 <LI><a href="#[1f]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1f]">ADC1_2_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[7]">BusFault_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[22]">CAN1_RX1_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[23]">CAN1_SCE_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[18]">DMA1_Channel1_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[19]">DMA1_Channel2_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel3_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel4_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1c]">DMA1_Channel5_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1d]">DMA1_Channel6_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1e]">DMA1_Channel7_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[a]">DebugMon_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[13]">EXTI0_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[35]">EXTI15_10_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[14]">EXTI1_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[15]">EXTI2_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[16]">EXTI3_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[17]">EXTI4_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[24]">EXTI9_5_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[11]">FLASH_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[5]">HardFault_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[2d]">I2C1_ER_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[2c]">I2C1_EV_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[2f]">I2C2_ER_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[2e]">I2C2_EV_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[6]">MemManage_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[4]">NMI_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[e]">PVD_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[12]">RCC_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[36]">RTCAlarm_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[10]">RTC_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[3f]">Reset_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[30]">SPI1_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[31]">SPI2_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[c]">SysTick_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[f]">TAMPER_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[25]">TIM1_BRK_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[28]">TIM1_CC_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[27]">TIM1_TRG_COM_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[26]">TIM1_UP_IRQHandler</a> from line_follower.o(.text.TIM1_UP_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[29]">TIM2_IRQHandler</a> from line_follower.o(.text.TIM2_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[2a]">TIM3_IRQHandler</a> from line_follower.o(.text.TIM3_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[2b]">TIM4_IRQHandler</a> from line_follower.o(.text.TIM4_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[32]">USART1_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[33]">USART2_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[34]">USART3_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[37]">USBWakeUp_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[20]">USB_HP_CAN1_TX_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[21]">USB_LP_CAN1_RX0_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[8]">UsageFault_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[d]">WWDG_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[3e]">Reflectance_Sensor::Reflectance_Sensor(ADC_CHANNELS)</a> from reflectance_sensor.o(.text._ZN18Reflectance_SensorC2E12ADC_CHANNELS) referenced from line_follower.o(.text.main)
 <LI><a href="#[3a]">Reflectance_Sensor::Reflectance_Sensor(Reflectance_Sensor*)</a> from reflectance_sensor.o(.text._ZN18Reflectance_SensorC2EPS_) referenced from line_sensor.o(.text._ZN11Line_SensorC2EPS_)
 <LI><a href="#[3d]">GPIO::digitalWrite(bool)</a> from gpio_1.o(.text._ZN4GPIO12digitalWriteEb) referenced from line_follower.o(.text.main)
 <LI><a href="#[3c]">GPIO::GPIO(GPIO_IO_ENUM, GPIO_MODES)</a> from gpio_1.o(.text._ZN4GPIOC2E12GPIO_IO_ENUM10GPIO_MODES) referenced from line_follower.o(.text.main)
 <LI><a href="#[3b]">Timer::GetTim()</a> from timer.o(.text._ZN5Timer6GetTimEv) referenced from pwm.o(.text._ZN3PWM7PWMInitEv)
 <LI><a href="#[3b]">Timer::GetTim()</a> from timer.o(.text._ZN5Timer6GetTimEv) referenced from encoder.o(.text._ZN7Encoder13ConfigEncoderEv)
 <LI><a href="#[39]">__I$use$semihosting</a> from use_no_semi.o(.text) referenced from sys_stackheap.o(.text)
 <LI><a href="#[38]">main</a> from line_follower.o(.text.main) referenced from startup.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[40]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[41]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[43]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[f2]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[f3]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[f4]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[47]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[f5]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[f6]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[f7]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[f8]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[f9]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[fa]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[fb]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[fc]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[fd]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[fe]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[ff]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[100]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[101]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[102]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[103]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[104]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[105]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[106]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[107]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[108]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[109]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[4b]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[10a]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[10b]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[10c]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[10d]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[10e]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[10f]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[110]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[42]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[111]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[44]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap &rArr; __user_initial_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[46]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[112]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[48]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 3632 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; Line_Sensor::Line_Sensor(Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor)
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[113]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[53]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[4a]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[114]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[4c]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[3f]"></a>Reset_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text))

<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic::Kinematic(Motor, Motor, Line_Sensor)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic::reset()
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor(PWM, Encoder, GPIO, GPIO)
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller::Controller(Kinematic)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor(Motor*)
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic::Kinematic(Kinematic*)
</UL>

<P><STRONG><a name="[115]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[116]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[117]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[4e]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[50]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>

<P><STRONG><a name="[4d]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[4f]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[118]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[119]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[11a]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[51]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[11b]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[39]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sys_stackheap.o(.text)
</UL>
<P><STRONG><a name="[11c]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[11d]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[45]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __user_setup_stackheap &rArr; __user_initial_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[49]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[52]"></a>__user_initial_stackheap</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, sys_stackheap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[26]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, line_follower.o(.text.TIM1_UP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM1_UP_IRQHandler &rArr; Encoder::Encoder_Handler(ENCODER_ENUM) &rArr; Encoder::Handler() &rArr; __aeabi_fsub
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::Encoder_Handler(ENCODER_ENUM)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM2_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, line_follower.o(.text.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TIM2_IRQHandler &rArr; Controller::HandlerByTime() &rArr; Controller::Handler() &rArr; Controller::article_control() &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::Timer_Handler()
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::Encoder_Handler_by_Time()
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic::handlerByTime()
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor_Handler_by_time()
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller::HandlerByTime()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM3_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, line_follower.o(.text.TIM3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM4_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, line_follower.o(.text.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM4_IRQHandler &rArr; Encoder::Encoder_Handler(ENCODER_ENUM) &rArr; Encoder::Handler() &rArr; __aeabi_fsub
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::Encoder_Handler(ENCODER_ENUM)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b7]"></a>Controller::setSpeedRef(float, float)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, following_controler.o(.text._ZN10Controller11setSpeedRefEff))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[59]"></a>Controller::HandlerByTime()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, following_controler.o(.text._ZN10Controller13HandlerByTimeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Controller::HandlerByTime() &rArr; Controller::Handler() &rArr; Controller::article_control() &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller::Handler()
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[5b]"></a>Controller::article_control()</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, following_controler.o(.text._ZN10Controller15article_controlEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Controller::article_control() &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic::setSpeed(float, float)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpge
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller::Handler()
</UL>

<P><STRONG><a name="[5a]"></a>Controller::Handler()</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, following_controler.o(.text._ZN10Controller7HandlerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Controller::Handler() &rArr; Controller::article_control() &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic::getLinePosition()
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic::getLineAngle()
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic::updateLineAngle()
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpge
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpgt
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller::article_control()
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller::HandlerByTime()
</UL>

<P><STRONG><a name="[68]"></a>Controller::Controller(Kinematic)</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, following_controler.o(.text._ZN10ControllerC2E9Kinematic))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Controller::Controller(Kinematic) &rArr; Kinematic::Kinematic(Kinematic*) &rArr; Motor::Motor(Motor*) &rArr; Encoder::Encoder(Encoder*) &rArr; Encoder::ConfigEncoder() &rArr; GPIO::ConfigGPIOPin()
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic::Kinematic(Kinematic*)
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11e]"></a>Controller::Controller__sub_object(Kinematic)</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, following_controler.o(.text._ZN10ControllerC2E9Kinematic), UNUSED)

<P><STRONG><a name="[6b]"></a>Line_Sensor::read()</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, line_sensor.o(.text._ZN11Line_Sensor4readEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Line_Sensor::read() &rArr; Reflectance_Sensor::Reflectance_Read() &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reflectance_Sensor::Reflectance_Read()
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmple
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpeq
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic::updateLineAngle()
</UL>

<P><STRONG><a name="[73]"></a>Line_Sensor::calibrate(unsigned)</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, line_sensor.o(.text._ZN11Line_Sensor9calibrateEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Line_Sensor::calibrate(unsigned) &rArr; Reflectance_Sensor::Calib_Reflectance_Sensor()
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reflectance_Sensor::Calib_Reflectance_Sensor()
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic::calibrateLineSensor(unsigned)
</UL>

<P><STRONG><a name="[b6]"></a>Line_Sensor::Line_Sensor(Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor)</STRONG> (Thumb, 300 bytes, Stack size 240 bytes, line_sensor.o(.text._ZN11Line_SensorC2E18Reflectance_SensorS0_S0_S0_S0_S0_S0_S0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Line_Sensor::Line_Sensor(Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor)
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11f]"></a>Line_Sensor::Line_Sensor__sub_object(Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor)</STRONG> (Thumb, 300 bytes, Stack size 240 bytes, line_sensor.o(.text._ZN11Line_SensorC2E18Reflectance_SensorS0_S0_S0_S0_S0_S0_S0_), UNUSED)

<P><STRONG><a name="[b2]"></a>Line_Sensor::Line_Sensor(Line_Sensor*)</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, line_sensor.o(.text._ZN11Line_SensorC2EPS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Line_Sensor::Line_Sensor(Line_Sensor*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic::Kinematic(Motor, Motor, Line_Sensor)
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic::Kinematic(Kinematic*)
</UL>

<P><STRONG><a name="[120]"></a>Line_Sensor::Line_Sensor__sub_object(Line_Sensor*)</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, line_sensor.o(.text._ZN11Line_SensorC2EPS_), UNUSED)

<P><STRONG><a name="[6c]"></a>Reflectance_Sensor::Reflectance_Read()</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, reflectance_sensor.o(.text._ZN18Reflectance_Sensor16Reflectance_ReadEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Reflectance_Sensor::Reflectance_Read() &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC::analogRead()
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_Sensor::read()
</UL>

<P><STRONG><a name="[74]"></a>Reflectance_Sensor::Calib_Reflectance_Sensor()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, reflectance_sensor.o(.text._ZN18Reflectance_Sensor24Calib_Reflectance_SensorEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Reflectance_Sensor::Calib_Reflectance_Sensor()
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC::analogRead()
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_Sensor::calibrate(unsigned)
</UL>

<P><STRONG><a name="[3e]"></a>Reflectance_Sensor::Reflectance_Sensor(ADC_CHANNELS)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, reflectance_sensor.o(.text._ZN18Reflectance_SensorC2E12ADC_CHANNELS))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Reflectance_Sensor::Reflectance_Sensor(ADC_CHANNELS) &rArr; ADC::ADC(ADC_CHANNELS) &rArr; ADC::ConfigADCPin() &rArr; GPIO::ConfigGPIOPin()
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC::ADC(ADC_CHANNELS)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> line_follower.o(.text.main)
</UL>
<P><STRONG><a name="[121]"></a>Reflectance_Sensor::Reflectance_Sensor__sub_object(ADC_CHANNELS)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, reflectance_sensor.o(.text._ZN18Reflectance_SensorC2E12ADC_CHANNELS), UNUSED)

<P><STRONG><a name="[3a]"></a>Reflectance_Sensor::Reflectance_Sensor(Reflectance_Sensor*)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, reflectance_sensor.o(.text._ZN18Reflectance_SensorC2EPS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Reflectance_Sensor::Reflectance_Sensor(Reflectance_Sensor*) &rArr; ADC::ADC(ADC_CHANNELS) &rArr; ADC::ConfigADCPin() &rArr; GPIO::ConfigGPIOPin()
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC::ADC(ADC_CHANNELS)
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC::GetADCChannel()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> line_sensor.o(.text._ZN11Line_SensorC2EPS_)
</UL>
<P><STRONG><a name="[122]"></a>Reflectance_Sensor::Reflectance_Sensor__sub_object(Reflectance_Sensor*)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, reflectance_sensor.o(.text._ZN18Reflectance_SensorC2EPS_), UNUSED)

<P><STRONG><a name="[75]"></a>ADC::analogRead()</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, adc.o(.text._ZN3ADC10analogReadEv))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reflectance_Sensor::Calib_Reflectance_Sensor()
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reflectance_Sensor::Reflectance_Read()
</UL>

<P><STRONG><a name="[7e]"></a>ADC::ADCCalibrate()</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, adc.o(.text._ZN3ADC12ADCCalibrateEv))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC::ConfigADCPin()
</UL>

<P><STRONG><a name="[7a]"></a>ADC::ConfigADCPin()</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, adc.o(.text._ZN3ADC12ConfigADCPinEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC::ConfigADCPin() &rArr; GPIO::ConfigGPIOPin()
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::SetGPIOPortPin(GPIO_IO_ENUM)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::ConfigGPIOPin()
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::SetGPIOMode(GPIO_MODES)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC::ADCCalibrate()
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC::ADC(ADC_CHANNELS)
</UL>

<P><STRONG><a name="[79]"></a>ADC::GetADCChannel()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, adc.o(.text._ZN3ADC13GetADCChannelEv))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reflectance_Sensor::Reflectance_Sensor(Reflectance_Sensor*)
</UL>

<P><STRONG><a name="[78]"></a>ADC::ADC(ADC_CHANNELS)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, adc.o(.text._ZN3ADCC2E12ADC_CHANNELS))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ADC::ADC(ADC_CHANNELS) &rArr; ADC::ConfigADCPin() &rArr; GPIO::ConfigGPIOPin()
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC::ConfigADCPin()
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reflectance_Sensor::Reflectance_Sensor(ADC_CHANNELS)
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reflectance_Sensor::Reflectance_Sensor(Reflectance_Sensor*)
</UL>

<P><STRONG><a name="[123]"></a>ADC::ADC__sub_object(ADC_CHANNELS)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, adc.o(.text._ZN3ADCC2E12ADC_CHANNELS), UNUSED)

<P><STRONG><a name="[7f]"></a>PWM::ConfigPWMPin()</STRONG> (Thumb, 500 bytes, Stack size 16 bytes, pwm.o(.text._ZN3PWM12ConfigPWMPinEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PWM::ConfigPWMPin() &rArr; GPIO::ConfigGPIOPin()
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::GetTim()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::GetTIMChannel()
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::GetTIMRemap()
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::SetGPIOPortPin(GPIO_IO_ENUM)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::ConfigGPIOPin()
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::SetGPIOMode(GPIO_MODES)
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::PWM(PWM*)
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::PWM(TIM_TypeDef*, TIM_CHANNELS, TIM_REMAP)
</UL>

<P><STRONG><a name="[82]"></a>PWM::PWMInit()</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, pwm.o(.text._ZN3PWM7PWMInitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PWM::PWMInit()
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::GetTim()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::GetTIMChannel()
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::PWM(PWM*)
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::PWM(TIM_TypeDef*, TIM_CHANNELS, TIM_REMAP)
</UL>

<P><STRONG><a name="[83]"></a>PWM::PWMWrite(float)</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, pwm.o(.text._ZN3PWM8PWMWriteEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PWM::PWMWrite(float) &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmplt
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpge
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpgt
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Handler()
</UL>

<P><STRONG><a name="[88]"></a>PWM::PWM(TIM_TypeDef*, TIM_CHANNELS, TIM_REMAP)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, pwm.o(.text._ZN3PWMC2EP11TIM_TypeDef12TIM_CHANNELS9TIM_REMAP))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PWM::PWM(TIM_TypeDef*, TIM_CHANNELS, TIM_REMAP) &rArr; PWM::ConfigPWMPin() &rArr; GPIO::ConfigGPIOPin()
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::Timer__sub_object(TIM_TypeDef*, TIM_CHANNELS, TIM_MODE)
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::SetTIMRemap(TIM_REMAP)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::PWMInit()
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::ConfigPWMPin()
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[124]"></a>PWM::PWM__sub_object(TIM_TypeDef*, TIM_CHANNELS, TIM_REMAP)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, pwm.o(.text._ZN3PWMC2EP11TIM_TypeDef12TIM_CHANNELS9TIM_REMAP), UNUSED)

<P><STRONG><a name="[8b]"></a>PWM::PWM(PWM*)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, pwm.o(.text._ZN3PWMC2EPS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PWM::PWM(PWM*) &rArr; PWM::ConfigPWMPin() &rArr; GPIO::ConfigGPIOPin()
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::Timer__sub_object(TIM_TypeDef*, TIM_CHANNELS, TIM_MODE)
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::GetTim()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::GetTIMChannel()
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::SetTIMRemap(TIM_REMAP)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::GetTIMRemap()
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::PWMInit()
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::ConfigPWMPin()
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor(PWM, Encoder, GPIO, GPIO)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor(Motor*)
</UL>

<P><STRONG><a name="[125]"></a>PWM::PWM__sub_object(PWM*)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, pwm.o(.text._ZN3PWMC2EPS_), UNUSED)

<P><STRONG><a name="[7c]"></a>GPIO::SetGPIOMode(GPIO_MODES)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gpio_1.o(.text._ZN4GPIO11SetGPIOModeE10GPIO_MODES))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::ConfigEncoder()
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC::ConfigADCPin()
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::ConfigPWMPin()
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::init(BD_ENUM)
</UL>

<P><STRONG><a name="[3d]"></a>GPIO::digitalWrite(bool)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gpio_1.o(.text._ZN4GPIO12digitalWriteEb))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Handler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> line_follower.o(.text.main)
</UL>
<P><STRONG><a name="[7d]"></a>GPIO::ConfigGPIOPin()</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, gpio_1.o(.text._ZN4GPIO13ConfigGPIOPinEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO::ConfigGPIOPin()
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::GPIO(GPIO*)
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::GPIO(GPIO_IO_ENUM, GPIO_MODES)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::ConfigEncoder()
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC::ConfigADCPin()
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::ConfigPWMPin()
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::init(BD_ENUM)
</UL>

<P><STRONG><a name="[7b]"></a>GPIO::SetGPIOPortPin(GPIO_IO_ENUM)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gpio_1.o(.text._ZN4GPIO14SetGPIOPortPinE12GPIO_IO_ENUM))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::ConfigEncoder()
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC::ConfigADCPin()
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::ConfigPWMPin()
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::init(BD_ENUM)
</UL>

<P><STRONG><a name="[b8]"></a>GPIO::tooglePin()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gpio_1.o(.text._ZN4GPIO9tooglePinEv))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3c]"></a>GPIO::GPIO(GPIO_IO_ENUM, GPIO_MODES)</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, gpio_1.o(.text._ZN4GPIOC2E12GPIO_IO_ENUM10GPIO_MODES))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO::GPIO(GPIO_IO_ENUM, GPIO_MODES) &rArr; GPIO::ConfigGPIOPin()
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::ConfigGPIOPin()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> line_follower.o(.text.main)
</UL>
<P><STRONG><a name="[126]"></a>GPIO::GPIO__sub_object(GPIO_IO_ENUM, GPIO_MODES)</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, gpio_1.o(.text._ZN4GPIOC2E12GPIO_IO_ENUM10GPIO_MODES), UNUSED)

<P><STRONG><a name="[8c]"></a>GPIO::GPIO(GPIO*)</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, gpio_1.o(.text._ZN4GPIOC2EPS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO::GPIO(GPIO*) &rArr; GPIO::ConfigGPIOPin()
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::ConfigGPIOPin()
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor(PWM, Encoder, GPIO, GPIO)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor(Motor*)
</UL>

<P><STRONG><a name="[127]"></a>GPIO::GPIO__sub_object(GPIO*)</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, gpio_1.o(.text._ZN4GPIOC2EPS_), UNUSED)

<P><STRONG><a name="[8d]"></a>Motor::getDeltaDistance()</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, motor.o(.text._ZN5Motor16getDeltaDistanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Motor::getDeltaDistance() &rArr; Encoder::getDeltaTicks() &rArr; Encoder::getTicks() &rArr; __aeabi_fadd
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::getDeltaTicks()
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic::handler()
</UL>

<P><STRONG><a name="[b5]"></a>Motor::Motor_Initialiize()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, motor.o(.text._ZN5Motor17Motor_InitialiizeEv))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[57]"></a>Motor::Motor_Handler_by_time()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, motor.o(.text._ZN5Motor21Motor_Handler_by_timeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Motor::Motor_Handler_by_time() &rArr; Motor::Handler() &rArr; PWM::PWMWrite(float) &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Handler()
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[90]"></a>Motor::reset()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, motor.o(.text._ZN5Motor5resetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Motor::reset() &rArr; Encoder::reset()
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic::reset()
</UL>

<P><STRONG><a name="[8f]"></a>Motor::Handler()</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, motor.o(.text._ZN5Motor7HandlerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Motor::Handler() &rArr; PWM::PWMWrite(float) &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::digitalWrite(bool)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::PWMWrite(float)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Get_Speed()
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmplt
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmple
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpge
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor_Handler_by_time()
</UL>

<P><STRONG><a name="[94]"></a>Motor::getTeta()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, motor.o(.text._ZN5Motor7getTetaEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Motor::getTeta() &rArr; Encoder::getTeta() &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::getTeta()
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic::getTeta()
</UL>

<P><STRONG><a name="[92]"></a>Motor::Get_Speed()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, motor.o(.text._ZN5Motor9Get_SpeedEv))
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::getSpeed()
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Handler()
</UL>

<P><STRONG><a name="[af]"></a>Motor::Set_Speed(float)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, motor.o(.text._ZN5Motor9Set_SpeedEf))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic::setSpeed(float, float)
</UL>

<P><STRONG><a name="[97]"></a>Motor::Motor(PWM, Encoder, GPIO, GPIO)</STRONG> (Thumb, 224 bytes, Stack size 80 bytes, motor.o(.text._ZN5MotorC2E3PWM7Encoder4GPIOS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Motor::Motor(PWM, Encoder, GPIO, GPIO) &rArr; Encoder::Encoder(Encoder*) &rArr; Encoder::ConfigEncoder() &rArr; GPIO::ConfigGPIOPin()
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::GetTim()
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::GPIO(GPIO*)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::Encoder(Encoder*)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::PWM(PWM*)
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[128]"></a>Motor::Motor__sub_object(PWM, Encoder, GPIO, GPIO)</STRONG> (Thumb, 224 bytes, Stack size 80 bytes, motor.o(.text._ZN5MotorC2E3PWM7Encoder4GPIOS2_), UNUSED)

<P><STRONG><a name="[99]"></a>Motor::Motor(Motor*)</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, motor.o(.text._ZN5MotorC2EPS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Motor::Motor(Motor*) &rArr; Encoder::Encoder(Encoder*) &rArr; Encoder::ConfigEncoder() &rArr; GPIO::ConfigGPIOPin()
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::GPIO(GPIO*)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::Encoder(Encoder*)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::PWM(PWM*)
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic::Kinematic(Motor, Motor, Line_Sensor)
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic::Kinematic(Kinematic*)
</UL>

<P><STRONG><a name="[129]"></a>Motor::Motor__sub_object(Motor*)</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, motor.o(.text._ZN5MotorC2EPS_), UNUSED)

<P><STRONG><a name="[81]"></a>Timer::GetTIMRemap()</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, timer.o(.text._ZN5Timer11GetTIMRemapEv))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::PWM(PWM*)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::ConfigPWMPin()
</UL>

<P><STRONG><a name="[8a]"></a>Timer::SetTIMRemap(TIM_REMAP)</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, timer.o(.text._ZN5Timer11SetTIMRemapE9TIM_REMAP))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::PWM(PWM*)
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::PWM(TIM_TypeDef*, TIM_CHANNELS, TIM_REMAP)
</UL>

<P><STRONG><a name="[a3]"></a>Timer::GetTime_usec()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer.o(.text._ZN5Timer12GetTime_usecEv))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::Handler()
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::reset()
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::Encoder_Handler_by_Time()
</UL>

<P><STRONG><a name="[80]"></a>Timer::GetTIMChannel()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timer.o(.text._ZN5Timer13GetTIMChannelEv))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::PWM(PWM*)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::PWMInit()
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::ConfigPWMPin()
</UL>

<P><STRONG><a name="[55]"></a>Timer::Timer_Handler()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, timer.o(.text._ZN5Timer13Timer_HandlerEv))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[b3]"></a>Timer::Timer_Initiallize()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer.o(.text._ZN5Timer17Timer_InitiallizeEv))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3b]"></a>Timer::GetTim()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timer.o(.text._ZN5Timer6GetTimEv))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::Encoder(Encoder*)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::getTicks()
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::reset()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::ConfigEncoder()
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::getDirection()
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::PWM(PWM*)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::PWMInit()
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::ConfigPWMPin()
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor(PWM, Encoder, GPIO, GPIO)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> encoder.o(.text._ZN7Encoder13ConfigEncoderEv)
<LI> pwm.o(.text._ZN3PWM7PWMInitEv)
</UL>
<P><STRONG><a name="[a5]"></a>Timer::SetTim(TIM_TypeDef*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timer.o(.text._ZN5Timer6SetTimEP11TIM_TypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::Encoder(Encoder*)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::Encoder(TIM_TypeDef*)
</UL>

<P><STRONG><a name="[9b]"></a>Timer::TimerInit()</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, timer.o(.text._ZN5Timer9TimerInitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Timer::TimerInit()
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::Timer(TIM_TypeDef*, TIM_MODE)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::Timer(TIM_TypeDef*, TIM_CHANNELS, TIM_MODE)
</UL>

<P><STRONG><a name="[9a]"></a>Timer::Timer(TIM_TypeDef*, TIM_CHANNELS, TIM_MODE)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, timer.o(.text._ZN5TimerC2EP11TIM_TypeDef12TIM_CHANNELS8TIM_MODE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::TimerInit()
</UL>

<P><STRONG><a name="[89]"></a>Timer::Timer__sub_object(TIM_TypeDef*, TIM_CHANNELS, TIM_MODE)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, timer.o(.text._ZN5TimerC2EP11TIM_TypeDef12TIM_CHANNELS8TIM_MODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timer::Timer__sub_object(TIM_TypeDef*, TIM_CHANNELS, TIM_MODE)
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::PWM(PWM*)
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::PWM(TIM_TypeDef*, TIM_CHANNELS, TIM_REMAP)
</UL>

<P><STRONG><a name="[9c]"></a>Timer::Timer(TIM_TypeDef*, TIM_MODE)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, timer.o(.text._ZN5TimerC2EP11TIM_TypeDef8TIM_MODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Timer::Timer(TIM_TypeDef*, TIM_MODE) &rArr; Timer::TimerInit()
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::TimerInit()
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12a]"></a>Timer::Timer__sub_object(TIM_TypeDef*, TIM_MODE)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, timer.o(.text._ZN5TimerC2EP11TIM_TypeDef8TIM_MODE), UNUSED)

<P><STRONG><a name="[9d]"></a>USART::init(BD_ENUM)</STRONG> (Thumb, 320 bytes, Stack size 16 bytes, usart.o(.text._ZN5USART4initE7BD_ENUM))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART::init(BD_ENUM) &rArr; GPIO::ConfigGPIOPin()
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::SetGPIOPortPin(GPIO_IO_ENUM)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::ConfigGPIOPin()
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::SetGPIOMode(GPIO_MODES)
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::USART(USART_TypeDef*, BD_ENUM)
</UL>

<P><STRONG><a name="[ba]"></a>USART::sendFloat(float*)</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, usart.o(.text._ZN5USART9sendFloatEPf))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9e]"></a>USART::USART(USART_TypeDef*, BD_ENUM)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usart.o(.text._ZN5USARTC2EP13USART_TypeDef7BD_ENUM))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART::USART(USART_TypeDef*, BD_ENUM) &rArr; USART::init(BD_ENUM) &rArr; GPIO::ConfigGPIOPin()
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::init(BD_ENUM)
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12b]"></a>USART::USART__sub_object(USART_TypeDef*, BD_ENUM)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usart.o(.text._ZN5USARTC2EP13USART_TypeDef7BD_ENUM), UNUSED)

<P><STRONG><a name="[9f]"></a>Encoder::getDirection()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, encoder.o(.text._ZN7Encoder12getDirectionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Encoder::getDirection()
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::GetTim()
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::Handler()
</UL>

<P><STRONG><a name="[a0]"></a>Encoder::ConfigEncoder()</STRONG> (Thumb, 572 bytes, Stack size 24 bytes, encoder.o(.text._ZN7Encoder13ConfigEncoderEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Encoder::ConfigEncoder() &rArr; GPIO::ConfigGPIOPin()
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::GetTim()
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::SetGPIOPortPin(GPIO_IO_ENUM)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::ConfigGPIOPin()
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::SetGPIOMode(GPIO_MODES)
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::Encoder(Encoder*)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::Encoder(TIM_TypeDef*)
</UL>

<P><STRONG><a name="[8e]"></a>Encoder::getDeltaTicks()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, encoder.o(.text._ZN7Encoder13getDeltaTicksEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Encoder::getDeltaTicks() &rArr; Encoder::getTicks() &rArr; __aeabi_fadd
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::getTicks()
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::getDeltaDistance()
</UL>

<P><STRONG><a name="[54]"></a>Encoder::Encoder_Handler(ENCODER_ENUM)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, encoder.o(.text._ZN7Encoder15Encoder_HandlerE12ENCODER_ENUM))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Encoder::Encoder_Handler(ENCODER_ENUM) &rArr; Encoder::Handler() &rArr; __aeabi_fsub
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::Handler()
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_IRQHandler
</UL>

<P><STRONG><a name="[b4]"></a>Encoder::Encoder_Initiallize()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, encoder.o(.text._ZN7Encoder19Encoder_InitiallizeEv))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[56]"></a>Encoder::Encoder_Handler_by_Time()</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, encoder.o(.text._ZN7Encoder23Encoder_Handler_by_TimeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Encoder::Encoder_Handler_by_Time() &rArr; __aeabi_fcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::GetTime_usec()
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[91]"></a>Encoder::reset()</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, encoder.o(.text._ZN7Encoder5resetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Encoder::reset()
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::GetTim()
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::GetTime_usec()
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::reset()
</UL>

<P><STRONG><a name="[a2]"></a>Encoder::Handler()</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, encoder.o(.text._ZN7Encoder7HandlerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Encoder::Handler() &rArr; __aeabi_fsub
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::GetTime_usec()
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::getDirection()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::Encoder_Handler(ENCODER_ENUM)
</UL>

<P><STRONG><a name="[95]"></a>Encoder::getTeta()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, encoder.o(.text._ZN7Encoder7getTetaEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Encoder::getTeta() &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::getTicks()
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::getTeta()
</UL>

<P><STRONG><a name="[96]"></a>Encoder::getSpeed()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, encoder.o(.text._ZN7Encoder8getSpeedEv))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Get_Speed()
</UL>

<P><STRONG><a name="[a1]"></a>Encoder::getTicks()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, encoder.o(.text._ZN7Encoder8getTicksEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Encoder::getTicks() &rArr; __aeabi_fadd
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::GetTim()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::getTeta()
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::getDeltaTicks()
</UL>

<P><STRONG><a name="[a4]"></a>Encoder::Encoder(TIM_TypeDef*)</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, encoder.o(.text._ZN7EncoderC2EP11TIM_TypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Encoder::Encoder(TIM_TypeDef*) &rArr; Encoder::ConfigEncoder() &rArr; GPIO::ConfigGPIOPin()
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::SetTim(TIM_TypeDef*)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::ConfigEncoder()
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12c]"></a>Encoder::Encoder__sub_object(TIM_TypeDef*)</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, encoder.o(.text._ZN7EncoderC2EP11TIM_TypeDef), UNUSED)

<P><STRONG><a name="[98]"></a>Encoder::Encoder(Encoder*)</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, encoder.o(.text._ZN7EncoderC2EPS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Encoder::Encoder(Encoder*) &rArr; Encoder::ConfigEncoder() &rArr; GPIO::ConfigGPIOPin()
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::SetTim(TIM_TypeDef*)
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::GetTim()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::ConfigEncoder()
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor(PWM, Encoder, GPIO, GPIO)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor(Motor*)
</UL>

<P><STRONG><a name="[12d]"></a>Encoder::Encoder__sub_object(Encoder*)</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, encoder.o(.text._ZN7EncoderC2EPS_), UNUSED)

<P><STRONG><a name="[a7]"></a>SysClock::SysClockInit()</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, sysclock.o(.text._ZN8SysClock12SysClockInitEv))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClock::SysClock()
</UL>

<P><STRONG><a name="[b9]"></a>SysClock::SysTickGetEvent()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sysclock.o(.text._ZN8SysClock15SysTickGetEventEv))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a6]"></a>SysClock::SysClock()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sysclock.o(.text._ZN8SysClockC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysClock::SysClock()
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClock::SysClockInit()
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12e]"></a>SysClock::SysClock__sub_object()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sysclock.o(.text._ZN8SysClockC2Ev), UNUSED)

<P><STRONG><a name="[66]"></a>Kinematic::getLineAngle()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, kinematic_control.o(.text._ZN9Kinematic12getLineAngleEv))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller::Handler()
</UL>

<P><STRONG><a name="[58]"></a>Kinematic::handlerByTime()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, kinematic_control.o(.text._ZN9Kinematic13handlerByTimeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Kinematic::handlerByTime() &rArr; Kinematic::handler() &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic::handler()
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[65]"></a>Kinematic::getLinePosition()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, kinematic_control.o(.text._ZN9Kinematic15getLinePositionEv))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller::Handler()
</UL>

<P><STRONG><a name="[64]"></a>Kinematic::updateLineAngle()</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, kinematic_control.o(.text._ZN9Kinematic15updateLineAngleEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Kinematic::updateLineAngle() &rArr; Line_Sensor::read() &rArr; Reflectance_Sensor::Reflectance_Read() &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_Sensor::read()
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpgt
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller::Handler()
</UL>

<P><STRONG><a name="[ab]"></a>Kinematic::calibrateLineSensor(unsigned)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, kinematic_control.o(.text._ZN9Kinematic19calibrateLineSensorEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Kinematic::calibrateLineSensor(unsigned) &rArr; Line_Sensor::calibrate(unsigned) &rArr; Reflectance_Sensor::Calib_Reflectance_Sensor()
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_Sensor::calibrate(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ac]"></a>Kinematic::reset()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, kinematic_control.o(.text._ZN9Kinematic5resetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Kinematic::reset() &rArr; Motor::reset() &rArr; Encoder::reset()
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::reset()
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic::Kinematic(Motor, Motor, Line_Sensor)
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic::Kinematic(Kinematic*)
</UL>

<P><STRONG><a name="[ad]"></a>Kinematic::getTeta()</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, kinematic_control.o(.text._ZN9Kinematic7getTetaEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Kinematic::getTeta() &rArr; Motor::getTeta() &rArr; Encoder::getTeta() &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::getTeta()
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic::handler()
</UL>

<P><STRONG><a name="[a8]"></a>Kinematic::handler()</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, kinematic_control.o(.text._ZN9Kinematic7handlerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Kinematic::handler() &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::getDeltaDistance()
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic::getTeta()
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic::handlerByTime()
</UL>

<P><STRONG><a name="[63]"></a>Kinematic::setSpeed(float, float)</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, kinematic_control.o(.text._ZN9Kinematic8setSpeedEff))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Kinematic::setSpeed(float, float) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Set_Speed(float)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller::article_control()
</UL>

<P><STRONG><a name="[b1]"></a>Kinematic::Kinematic(Motor, Motor, Line_Sensor)</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, kinematic_control.o(.text._ZN9KinematicC2E5MotorS0_11Line_Sensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Kinematic::Kinematic(Motor, Motor, Line_Sensor) &rArr; Motor::Motor(Motor*) &rArr; Encoder::Encoder(Encoder*) &rArr; Encoder::ConfigEncoder() &rArr; GPIO::ConfigGPIOPin()
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic::reset()
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor(Motor*)
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_Sensor::Line_Sensor(Line_Sensor*)
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12f]"></a>Kinematic::Kinematic__sub_object(Motor, Motor, Line_Sensor)</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, kinematic_control.o(.text._ZN9KinematicC2E5MotorS0_11Line_Sensor), UNUSED)

<P><STRONG><a name="[6a]"></a>Kinematic::Kinematic(Kinematic*)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, kinematic_control.o(.text._ZN9KinematicC2EPS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Kinematic::Kinematic(Kinematic*) &rArr; Motor::Motor(Motor*) &rArr; Encoder::Encoder(Encoder*) &rArr; Encoder::ConfigEncoder() &rArr; GPIO::ConfigGPIOPin()
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic::reset()
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor(Motor*)
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_Sensor::Line_Sensor(Line_Sensor*)
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller::Controller(Kinematic)
</UL>

<P><STRONG><a name="[130]"></a>Kinematic::Kinematic__sub_object(Kinematic*)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, kinematic_control.o(.text._ZN9KinematicC2EPS_), UNUSED)

<P><STRONG><a name="[38]"></a>main</STRONG> (Thumb, 1404 bytes, Stack size 3392 bytes, line_follower.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 3632<LI>Call Chain = main &rArr; Line_Sensor::Line_Sensor(Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor)
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::Timer(TIM_TypeDef*, TIM_MODE)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::Timer_Initiallize()
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::GetTime_usec()
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClock::SysClock()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClock::SysTickGetEvent()
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::tooglePin()
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::Encoder(TIM_TypeDef*)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::Encoder_Initiallize()
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::PWM(TIM_TypeDef*, TIM_CHANNELS, TIM_REMAP)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::PWMWrite(float)
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic::Kinematic(Motor, Motor, Line_Sensor)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic::reset()
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic::calibrateLineSensor(unsigned)
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic::getLinePosition()
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic::getLineAngle()
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor(PWM, Encoder, GPIO, GPIO)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor_Initialiize()
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_Sensor::Line_Sensor(Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor)
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller::Controller(Kinematic)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller::setSpeedRef(float, float)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::USART(USART_TypeDef*, BD_ENUM)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::sendFloat(float*)
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.text)
</UL>
<P><STRONG><a name="[c2]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
</UL>

<P><STRONG><a name="[bb]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>

<P><STRONG><a name="[bd]"></a>__mathlib_flt_infnan2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_flt_infnan2 &rArr; __aeabi_fadd
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
</UL>

<P><STRONG><a name="[be]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_flt_invalid &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>

<P><STRONG><a name="[bf]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
</UL>

<P><STRONG><a name="[c0]"></a>__mathlib_rredf2</STRONG> (Thumb, 344 bytes, Stack size 32 bytes, rredf.o(i.__mathlib_rredf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_rredf2 &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>

<P><STRONG><a name="[aa]"></a>atan2f</STRONG> (Thumb, 528 bytes, Stack size 32 bytes, atan2f.o(i.atan2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = atan2f &rArr; __mathlib_flt_infnan2 &rArr; __aeabi_fadd
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic::updateLineAngle()
</UL>

<P><STRONG><a name="[ae]"></a>cosf</STRONG> (Thumb, 328 bytes, Stack size 32 bytes, cosf.o(i.cosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = cosf &rArr; __mathlib_rredf2 &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic::handler()
</UL>

<P><STRONG><a name="[60]"></a>sinf</STRONG> (Thumb, 338 bytes, Stack size 32 bytes, sinf.o(i.sinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic::handler()
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller::article_control()
</UL>

<P><STRONG><a name="[a9]"></a>sqrtf</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sqrtf.o(i.sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sqrtf &rArr; _fsqrt &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsqrt
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic::updateLineAngle()
</UL>

<P><STRONG><a name="[72]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::getTeta()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Handler()
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::getDeltaDistance()
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_Sensor::read()
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic::setSpeed(float, float)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic::getTeta()
</UL>

<P><STRONG><a name="[c6]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[93]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Handler()
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic::setSpeed(float, float)
</UL>

<P><STRONG><a name="[c9]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[ce]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[71]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::getDeltaDistance()
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_Sensor::read()
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic::setSpeed(float, float)
</UL>

<P><STRONG><a name="[cc]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[131]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)

<P><STRONG><a name="[cd]"></a>_dcmpeq</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dneq
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deq
</UL>

<P><STRONG><a name="[132]"></a>__aeabi_cdcmpge</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dgeqf.o(x$fpl$dgeqf), UNUSED)

<P><STRONG><a name="[cf]"></a>_dcmpge</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dgeqf.o(x$fpl$dgeqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dgeq
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dgr
</UL>

<P><STRONG><a name="[133]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)

<P><STRONG><a name="[d0]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dls
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dleq
</UL>

<P><STRONG><a name="[134]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)

<P><STRONG><a name="[70]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::getTeta()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Handler()
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::getDeltaDistance()
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_Sensor::read()
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic::setSpeed(float, float)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic::getTeta()
</UL>

<P><STRONG><a name="[d1]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[c8]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[cb]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[b0]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic::setSpeed(float, float)
</UL>

<P><STRONG><a name="[d2]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[5c]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::getTeta()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Handler()
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::getDeltaDistance()
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_Sensor::read()
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic::setSpeed(float, float)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic::getTeta()
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller::Handler()
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller::article_control()
</UL>

<P><STRONG><a name="[d4]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[62]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::getTicks()
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::Handler()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Handler()
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_Sensor::read()
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic::handler()
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic::updateLineAngle()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller::article_control()
</UL>

<P><STRONG><a name="[d6]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[d8]"></a>__fpl_fcheck_NaN1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fcheck1.o(x$fpl$fcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>

<P><STRONG><a name="[135]"></a>__aeabi_dcmpeq</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)

<P><STRONG><a name="[da]"></a>_deq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[db]"></a>_dneq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[67]"></a>__aeabi_dcmpgt</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmpgt
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller::Handler()
</UL>

<P><STRONG><a name="[dc]"></a>_dgr</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
</UL>

<P><STRONG><a name="[5f]"></a>__aeabi_dcmpge</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmpge
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller::Handler()
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller::article_control()
</UL>

<P><STRONG><a name="[dd]"></a>_dgeq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
</UL>

<P><STRONG><a name="[5d]"></a>__aeabi_dcmple</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller::article_control()
</UL>

<P><STRONG><a name="[de]"></a>_dleq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[136]"></a>__aeabi_dcmplt</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)

<P><STRONG><a name="[df]"></a>_dls</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[6f]"></a>__aeabi_fcmpeq</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::Encoder_Handler_by_Time()
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_Sensor::read()
</UL>

<P><STRONG><a name="[e0]"></a>_feq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
</UL>

<P><STRONG><a name="[e2]"></a>_fneq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
</UL>

<P><STRONG><a name="[84]"></a>__aeabi_fcmpgt</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fcmpgt
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::PWMWrite(float)
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic::updateLineAngle()
</UL>

<P><STRONG><a name="[e3]"></a>_fgr</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpge
</UL>

<P><STRONG><a name="[87]"></a>__aeabi_fcmpge</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fcmpge
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::PWMWrite(float)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Handler()
</UL>

<P><STRONG><a name="[e5]"></a>_fgeq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpge
</UL>

<P><STRONG><a name="[6d]"></a>__aeabi_fcmple</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Handler()
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_Sensor::read()
</UL>

<P><STRONG><a name="[e6]"></a>_fleq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[85]"></a>__aeabi_fcmplt</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fcmplt
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::PWMWrite(float)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Handler()
</UL>

<P><STRONG><a name="[e8]"></a>_fls</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[ea]"></a>__fpl_fcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fcmpi.o(x$fpl$fcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpge
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
</UL>

<P><STRONG><a name="[61]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::PWMWrite(float)
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_Sensor::read()
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reflectance_Sensor::Reflectance_Read()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller::article_control()
</UL>

<P><STRONG><a name="[e9]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[137]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, feqf.o(x$fpl$feqf), UNUSED)

<P><STRONG><a name="[e1]"></a>_fcmpeq</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, feqf.o(x$fpl$feqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fneq
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_feq
</UL>

<P><STRONG><a name="[c4]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>

<P><STRONG><a name="[eb]"></a>_ffix</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[86]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::PWMWrite(float)
</UL>

<P><STRONG><a name="[ec]"></a>_ffixu</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[6e]"></a>__aeabi_i2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_Sensor::read()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
</UL>

<P><STRONG><a name="[138]"></a>_fflt</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[76]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::getTicks()
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::Handler()
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reflectance_Sensor::Reflectance_Read()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
</UL>

<P><STRONG><a name="[139]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[e4]"></a>_fcmpge</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fgeqf.o(x$fpl$fgeqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fgeq
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fgr
</UL>

<P><STRONG><a name="[13a]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)

<P><STRONG><a name="[e7]"></a>_fcmple</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fls
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fleq
</UL>

<P><STRONG><a name="[13b]"></a>__fpl_fcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fleqf.o(x$fpl$fleqf), UNUSED)

<P><STRONG><a name="[5e]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::PWMWrite(float)
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_Sensor::read()
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reflectance_Sensor::Reflectance_Read()
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic::handler()
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic::updateLineAngle()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller::article_control()
</UL>

<P><STRONG><a name="[ed]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[d5]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __fpl_fnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsqrt
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpge
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[c7]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[c3]"></a>_frnd</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, frnd.o(x$fpl$frnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _frnd &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>

<P><STRONG><a name="[c1]"></a>__aeabi_frsub</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
</UL>

<P><STRONG><a name="[ee]"></a>_frsb</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[c5]"></a>_fsqrt</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, fsqrt.o(x$fpl$fsqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _fsqrt &rArr; __fpl_fnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
</UL>

<P><STRONG><a name="[77]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::Handler()
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::getDeltaTicks()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Handler()
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reflectance_Sensor::Reflectance_Read()
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic::getTeta()
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic::updateLineAngle()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
</UL>

<P><STRONG><a name="[f0]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[d9]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
</UL>

<P><STRONG><a name="[bc]"></a>__ARM_scalbnf</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, scalbnf.o(x$fpl$scalbnf))
<BR><BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
</UL>

<P><STRONG><a name="[f1]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[d3]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
</UL>

<P><STRONG><a name="[ca]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[ef]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
</UL>

<P><STRONG><a name="[d7]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
