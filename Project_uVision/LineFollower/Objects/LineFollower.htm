<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\LineFollower.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\LineFollower.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Wed Feb 27 18:33:58 2019
<BR><P>
<H3>Maximum Stack Usage =        560 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; Line_Sensor::Line_Sensor(ADC_CHANNELS, ADC_CHANNELS, ADC_CHANNELS, ADC_CHANNELS, ADC_CHANNELS, ADC_CHANNELS, ADC_CHANNELS, ADC_CHANNELS) &rArr; __aeabi_vec_ctor_nocookie_nodtor
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[42]">Reset_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[b]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">NMI_Handler</a><BR>
 <LI><a href="#[c]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">HardFault_Handler</a><BR>
 <LI><a href="#[d]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">MemManage_Handler</a><BR>
 <LI><a href="#[e]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">BusFault_Handler</a><BR>
 <LI><a href="#[f]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">UsageFault_Handler</a><BR>
 <LI><a href="#[10]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">SVC_Handler</a><BR>
 <LI><a href="#[11]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">DebugMon_Handler</a><BR>
 <LI><a href="#[12]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">PendSV_Handler</a><BR>
 <LI><a href="#[13]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">SysTick_Handler</a><BR>
 <LI><a href="#[26]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[26]">ADC1_2_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[e]">BusFault_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[29]">CAN1_RX1_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[2a]">CAN1_SCE_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1f]">DMA1_Channel1_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[20]">DMA1_Channel2_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[21]">DMA1_Channel3_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[22]">DMA1_Channel4_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[23]">DMA1_Channel5_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[24]">DMA1_Channel6_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[25]">DMA1_Channel7_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[11]">DebugMon_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1a]">EXTI0_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[3c]">EXTI15_10_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1b]">EXTI1_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1c]">EXTI2_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1d]">EXTI3_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1e]">EXTI4_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[2b]">EXTI9_5_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[18]">FLASH_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[c]">HardFault_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[34]">I2C1_ER_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[33]">I2C1_EV_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[36]">I2C2_ER_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[35]">I2C2_EV_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[d]">MemManage_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[b]">NMI_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[15]">PVD_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[12]">PendSV_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[19]">RCC_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[3d]">RTCAlarm_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[17]">RTC_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[42]">Reset_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[37]">SPI1_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[38]">SPI2_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[10]">SVC_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[13]">SysTick_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[16]">TAMPER_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[2c]">TIM1_BRK_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[2f]">TIM1_CC_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[2e]">TIM1_TRG_COM_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[2d]">TIM1_UP_IRQHandler</a> from main.o(i.TIM1_UP_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[30]">TIM2_IRQHandler</a> from main.o(i.TIM2_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[31]">TIM3_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[32]">TIM4_IRQHandler</a> from main.o(i.TIM4_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[39]">USART1_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[3a]">USART2_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[3b]">USART3_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[3e]">USBWakeUp_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[27]">USB_HP_CAN1_TX_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[28]">USB_LP_CAN1_RX0_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[f]">UsageFault_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[14]">WWDG_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[41]">Reflectance_Sensor::Reflectance_Sensor()</a> from reflectance_sensor.o(i._ZN18Reflectance_SensorC1Ev) referenced from line_sensor.o(i._ZN11Line_SensorC1E12ADC_CHANNELSS0_S0_S0_S0_S0_S0_S0_)
 <LI><a href="#[40]">__I$use$semihosting</a> from use_no_semi.o(.text) referenced from sys_stackheap.o(.text)
 <LI><a href="#[3f]">main</a> from main.o(i.main) referenced from startup.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[43]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[44]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[46]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[86]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[87]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[47]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[88]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[4b]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[89]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[8a]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[8b]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[8c]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[8d]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[8e]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[8f]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[90]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[91]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[92]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[93]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[94]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[95]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[96]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[97]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[98]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[99]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[9a]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[9b]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[9c]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[9d]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[4f]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[9e]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[9f]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[a0]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[a1]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[a2]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[a3]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[a4]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[45]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[a5]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[48]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap &rArr; __user_initial_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[4a]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[a6]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[4c]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; Line_Sensor::Line_Sensor(ADC_CHANNELS, ADC_CHANNELS, ADC_CHANNELS, ADC_CHANNELS, ADC_CHANNELS, ADC_CHANNELS, ADC_CHANNELS, ADC_CHANNELS) &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[a7]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[54]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[4e]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[a8]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[50]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[42]"></a>Reset_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text))

<P><STRONG><a name="[b]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __user_setup_stackheap &rArr; __user_initial_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[4d]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[a9]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[52]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[aa]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[53]"></a>__user_initial_stackheap</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, sys_stackheap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[51]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[40]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sys_stackheap.o(.text)
</UL>
<P><STRONG><a name="[ab]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[ac]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[2d]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, main.o(i.TIM1_UP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM1_UP_IRQHandler &rArr; Encoder::Encoder_Handler(ENCODER_ENUM)
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::Encoder_Ticks_overflow(TIM_TypeDef*)
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::Encoder_Handler(ENCODER_ENUM)
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::GetTime_usec()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM2_IRQHandler</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, main.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::Timer_Handler_by_Time()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM4_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main.o(i.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM4_IRQHandler &rArr; Encoder::Encoder_Handler(ENCODER_ENUM)
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::Encoder_Ticks_overflow(TIM_TypeDef*)
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::Encoder_Handler(ENCODER_ENUM)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>Line_Sensor::Line_Sensor(ADC_CHANNELS, ADC_CHANNELS, ADC_CHANNELS, ADC_CHANNELS, ADC_CHANNELS, ADC_CHANNELS, ADC_CHANNELS, ADC_CHANNELS)</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, line_sensor.o(i._ZN11Line_SensorC1E12ADC_CHANNELSS0_S0_S0_S0_S0_S0_S0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Line_Sensor::Line_Sensor(ADC_CHANNELS, ADC_CHANNELS, ADC_CHANNELS, ADC_CHANNELS, ADC_CHANNELS, ADC_CHANNELS, ADC_CHANNELS, ADC_CHANNELS) &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC::SetADCChannel(ADC_CHANNELS)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC::ConfigADCPin()
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ad]"></a>Line_Sensor::Line_Sensor__sub_object(ADC_CHANNELS, ADC_CHANNELS, ADC_CHANNELS, ADC_CHANNELS, ADC_CHANNELS, ADC_CHANNELS, ADC_CHANNELS, ADC_CHANNELS)</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, line_sensor.o(i._ZN11Line_SensorC1E12ADC_CHANNELSS0_S0_S0_S0_S0_S0_S0_), UNUSED)

<P><STRONG><a name="[41]"></a>Reflectance_Sensor::Reflectance_Sensor()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, reflectance_sensor.o(i._ZN18Reflectance_SensorC1Ev))
<BR>[Address Reference Count : 1]<UL><LI> line_sensor.o(i._ZN11Line_SensorC1E12ADC_CHANNELSS0_S0_S0_S0_S0_S0_S0_)
</UL>
<P><STRONG><a name="[ae]"></a>Reflectance_Sensor::Reflectance_Sensor__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, reflectance_sensor.o(i._ZN18Reflectance_SensorC1Ev), UNUSED)

<P><STRONG><a name="[61]"></a>ADC::ADCCalibrate()</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, adc.o(i._ZN3ADC12ADCCalibrateEv))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC::ConfigADCPin()
</UL>

<P><STRONG><a name="[5c]"></a>ADC::ConfigADCPin()</STRONG> (Thumb, 246 bytes, Stack size 8 bytes, adc.o(i._ZN3ADC12ConfigADCPinEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC::ConfigADCPin() &rArr; GPIO::ConfigGPIOPin()
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC::GetADCChannel()
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC::ADCCalibrate()
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::SetGPIOPortPin(GPIO_IO_ENUM)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::ConfigGPIOPin()
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::SetGPIOMode(GPIO_MODES)
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_Sensor::Line_Sensor(ADC_CHANNELS, ADC_CHANNELS, ADC_CHANNELS, ADC_CHANNELS, ADC_CHANNELS, ADC_CHANNELS, ADC_CHANNELS, ADC_CHANNELS)
</UL>

<P><STRONG><a name="[5d]"></a>ADC::GetADCChannel()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, adc.o(i._ZN3ADC13GetADCChannelEv))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC::ConfigADCPin()
</UL>

<P><STRONG><a name="[5b]"></a>ADC::SetADCChannel(ADC_CHANNELS)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, adc.o(i._ZN3ADC13SetADCChannelE12ADC_CHANNELS))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_Sensor::Line_Sensor(ADC_CHANNELS, ADC_CHANNELS, ADC_CHANNELS, ADC_CHANNELS, ADC_CHANNELS, ADC_CHANNELS, ADC_CHANNELS, ADC_CHANNELS)
</UL>

<P><STRONG><a name="[62]"></a>PWM::ConfigPWMPin()</STRONG> (Thumb, 714 bytes, Stack size 8 bytes, pwm.o(i._ZN3PWM12ConfigPWMPinEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PWM::ConfigPWMPin() &rArr; GPIO::ConfigGPIOPin()
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::GetTim()
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::GetTIMChannel()
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::GetTIMRemap()
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::SetGPIOPortPin(GPIO_IO_ENUM)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::ConfigGPIOPin()
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::SetGPIOMode(GPIO_MODES)
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::PWM(TIM_TypeDef*, TIM_CHANNELS, TIM_REMAP)
</UL>

<P><STRONG><a name="[66]"></a>PWM::PWMInit()</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, pwm.o(i._ZN3PWM7PWMInitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PWM::PWMInit()
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::GetTim()
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::GetTIMChannel()
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::PWM(TIM_TypeDef*, TIM_CHANNELS, TIM_REMAP)
</UL>

<P><STRONG><a name="[85]"></a>PWM::PWMWrite(unsigned short)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pwm.o(i._ZN3PWM8PWMWriteEt))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[67]"></a>PWM::PWM(TIM_TypeDef*, TIM_CHANNELS, TIM_REMAP)</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, pwm.o(i._ZN3PWMC1EP11TIM_TypeDef12TIM_CHANNELS9TIM_REMAP))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PWM::PWM(TIM_TypeDef*, TIM_CHANNELS, TIM_REMAP) &rArr; Timer::Timer(TIM_TypeDef*, TIM_CHANNELS, TIM_MODE) &rArr; Timer::TimerInit()
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::PWMInit()
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::ConfigPWMPin()
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::Timer(TIM_TypeDef*, TIM_CHANNELS, TIM_MODE)
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::SetTIMRemap(TIM_REMAP)
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[af]"></a>PWM::PWM__sub_object(TIM_TypeDef*, TIM_CHANNELS, TIM_REMAP)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, pwm.o(i._ZN3PWMC1EP11TIM_TypeDef12TIM_CHANNELS9TIM_REMAP), UNUSED)

<P><STRONG><a name="[6f]"></a>GPIO::GetGPIOMode()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio_1.o(i._ZN4GPIO11GetGPIOModeEv))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::ConfigGPIOPin()
</UL>

<P><STRONG><a name="[6b]"></a>GPIO::GetGPIOPort()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio_1.o(i._ZN4GPIO11GetGPIOPortEv))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::ConfigGPIOPin()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::digitalWrite(bool)
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::Config_PU_PD(PU_PD_ENUM)
</UL>

<P><STRONG><a name="[5f]"></a>GPIO::SetGPIOMode(GPIO_MODES)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gpio_1.o(i._ZN4GPIO11SetGPIOModeE10GPIO_MODES))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::init()
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::ConfigEncoder()
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC::ConfigADCPin()
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::ConfigPWMPin()
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::GPIO(GPIO_IO_ENUM, GPIO_MODES)
</UL>

<P><STRONG><a name="[6a]"></a>GPIO::Config_PU_PD(PU_PD_ENUM)</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, gpio_1.o(i._ZN4GPIO12Config_PU_PDE10PU_PD_ENUM))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO::Config_PU_PD(PU_PD_ENUM)
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::GetGPIOPinNumber()
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::GetGPIOPort()
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::GPIO(GPIO_IO_ENUM, GPIO_MODES)
</UL>

<P><STRONG><a name="[6e]"></a>GPIO::GetGPIOState()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio_1.o(i._ZN4GPIO12GetGPIOStateEv))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::digitalWrite(bool)
</UL>

<P><STRONG><a name="[6d]"></a>GPIO::digitalWrite(bool)</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, gpio_1.o(i._ZN4GPIO12digitalWriteEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO::digitalWrite(bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::GetGPIOPinNumber()
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::GetGPIOState()
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::GetGPIOPort()
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[60]"></a>GPIO::ConfigGPIOPin()</STRONG> (Thumb, 382 bytes, Stack size 8 bytes, gpio_1.o(i._ZN4GPIO13ConfigGPIOPinEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO::ConfigGPIOPin()
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::GetGPIOPinNumber()
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::GetGPIOPort()
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::GetGPIOMode()
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::init()
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::ConfigEncoder()
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC::ConfigADCPin()
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::ConfigPWMPin()
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::GPIO(GPIO_IO_ENUM, GPIO_MODES)
</UL>

<P><STRONG><a name="[5e]"></a>GPIO::SetGPIOPortPin(GPIO_IO_ENUM)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gpio_1.o(i._ZN4GPIO14SetGPIOPortPinE12GPIO_IO_ENUM))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::init()
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::ConfigEncoder()
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC::ConfigADCPin()
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::ConfigPWMPin()
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::GPIO(GPIO_IO_ENUM, GPIO_MODES)
</UL>

<P><STRONG><a name="[6c]"></a>GPIO::GetGPIOPinNumber()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio_1.o(i._ZN4GPIO16GetGPIOPinNumberEv))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::ConfigGPIOPin()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::digitalWrite(bool)
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::Config_PU_PD(PU_PD_ENUM)
</UL>

<P><STRONG><a name="[71]"></a>GPIO::SetIOPin(GPIO_IO_ENUM)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gpio_1.o(i._ZN4GPIO8SetIOPinE12GPIO_IO_ENUM))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::GPIO(GPIO_IO_ENUM, GPIO_MODES)
</UL>

<P><STRONG><a name="[70]"></a>GPIO::GPIO(GPIO_IO_ENUM, GPIO_MODES)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gpio_1.o(i._ZN4GPIOC1E12GPIO_IO_ENUM10GPIO_MODES))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO::GPIO(GPIO_IO_ENUM, GPIO_MODES) &rArr; GPIO::ConfigGPIOPin()
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::SetIOPin(GPIO_IO_ENUM)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::SetGPIOPortPin(GPIO_IO_ENUM)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::ConfigGPIOPin()
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::Config_PU_PD(PU_PD_ENUM)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::SetGPIOMode(GPIO_MODES)
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b0]"></a>GPIO::GPIO__sub_object(GPIO_IO_ENUM, GPIO_MODES)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, gpio_1.o(i._ZN4GPIOC1E12GPIO_IO_ENUM10GPIO_MODES), UNUSED)

<P><STRONG><a name="[73]"></a>Timer::GetTIMMode()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(i._ZN5Timer10GetTIMModeEv))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::TimerInit()
</UL>

<P><STRONG><a name="[76]"></a>Timer::SetTIMMode(TIM_MODE)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timer.o(i._ZN5Timer10SetTIMModeE8TIM_MODE))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::Timer(TIM_TypeDef*, TIM_MODE)
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::Timer(TIM_TypeDef*, TIM_CHANNELS, TIM_MODE)
</UL>

<P><STRONG><a name="[65]"></a>Timer::GetTIMRemap()</STRONG> (Thumb, 80 bytes, Stack size 4 bytes, timer.o(i._ZN5Timer11GetTIMRemapEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Timer::GetTIMRemap()
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::GetTim()
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::ConfigPWMPin()
</UL>

<P><STRONG><a name="[69]"></a>Timer::SetTIMRemap(TIM_REMAP)</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, timer.o(i._ZN5Timer11SetTIMRemapE9TIM_REMAP))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Timer::SetTIMRemap(TIM_REMAP)
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::GetTim()
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::PWM(TIM_TypeDef*, TIM_CHANNELS, TIM_REMAP)
</UL>

<P><STRONG><a name="[55]"></a>Timer::GetTime_usec()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer.o(i._ZN5Timer12GetTime_usecEv))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_IRQHandler
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::Encoder_Handler(ENCODER_ENUM)
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[64]"></a>Timer::GetTIMChannel()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(i._ZN5Timer13GetTIMChannelEv))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::PWMInit()
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::ConfigPWMPin()
</UL>

<P><STRONG><a name="[75]"></a>Timer::SetTIMChannel(TIM_CHANNELS)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timer.o(i._ZN5Timer13SetTIMChannelE12TIM_CHANNELS))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::Timer(TIM_TypeDef*, TIM_CHANNELS, TIM_MODE)
</UL>

<P><STRONG><a name="[83]"></a>Timer::Timer_Initiallize()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, timer.o(i._ZN5Timer17Timer_InitiallizeEv))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[58]"></a>Timer::Timer_Handler_by_Time()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, timer.o(i._ZN5Timer21Timer_Handler_by_TimeEv))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[63]"></a>Timer::GetTim()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(i._ZN5Timer6GetTimEv))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::ConfigEncoder()
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::GetEncTicks()
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::GetEncSpeed()
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::PWMInit()
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::ConfigPWMPin()
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::TimerInit()
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::SetTIMRemap(TIM_REMAP)
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::GetTIMRemap()
</UL>

<P><STRONG><a name="[74]"></a>Timer::SetTim(TIM_TypeDef*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timer.o(i._ZN5Timer6SetTimEP11TIM_TypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::Encoder(TIM_TypeDef*)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::Timer(TIM_TypeDef*, TIM_MODE)
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::Timer(TIM_TypeDef*, TIM_CHANNELS, TIM_MODE)
</UL>

<P><STRONG><a name="[72]"></a>Timer::TimerInit()</STRONG> (Thumb, 362 bytes, Stack size 4 bytes, timer.o(i._ZN5Timer9TimerInitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Timer::TimerInit()
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::GetTim()
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::GetTIMMode()
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::Timer(TIM_TypeDef*, TIM_MODE)
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::Timer(TIM_TypeDef*, TIM_CHANNELS, TIM_MODE)
</UL>

<P><STRONG><a name="[68]"></a>Timer::Timer(TIM_TypeDef*, TIM_CHANNELS, TIM_MODE)</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, timer.o(i._ZN5TimerC1EP11TIM_TypeDef12TIM_CHANNELS8TIM_MODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Timer::Timer(TIM_TypeDef*, TIM_CHANNELS, TIM_MODE) &rArr; Timer::TimerInit()
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::TimerInit()
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::SetTim(TIM_TypeDef*)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::SetTIMChannel(TIM_CHANNELS)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::SetTIMMode(TIM_MODE)
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::PWM(TIM_TypeDef*, TIM_CHANNELS, TIM_REMAP)
</UL>

<P><STRONG><a name="[b1]"></a>Timer::Timer__sub_object(TIM_TypeDef*, TIM_CHANNELS, TIM_MODE)</STRONG> (Thumb, 0 bytes, Stack size 20 bytes, timer.o(i._ZN5TimerC1EP11TIM_TypeDef12TIM_CHANNELS8TIM_MODE), UNUSED)

<P><STRONG><a name="[77]"></a>Timer::Timer(TIM_TypeDef*, TIM_MODE)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, timer.o(i._ZN5TimerC1EP11TIM_TypeDef8TIM_MODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Timer::Timer(TIM_TypeDef*, TIM_MODE) &rArr; Timer::TimerInit()
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::TimerInit()
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::SetTim(TIM_TypeDef*)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::SetTIMMode(TIM_MODE)
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b2]"></a>Timer::Timer__sub_object(TIM_TypeDef*, TIM_MODE)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, timer.o(i._ZN5TimerC1EP11TIM_TypeDef8TIM_MODE), UNUSED)

<P><STRONG><a name="[78]"></a>USART::Send_Vec_16(unsigned short*, unsigned short)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, usart.o(i._ZN5USART11Send_Vec_16EPtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART::Send_Vec_16(unsigned short*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::Send(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[79]"></a>USART::Send(unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usart.o(i._ZN5USART4SendEh))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::Send_Vec_16(unsigned short*, unsigned short)
</UL>

<P><STRONG><a name="[7a]"></a>USART::init()</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, usart.o(i._ZN5USART4initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART::init() &rArr; GPIO::ConfigGPIOPin()
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::SetGPIOPortPin(GPIO_IO_ENUM)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::ConfigGPIOPin()
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::SetGPIOMode(GPIO_MODES)
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::USART(USART_TypeDef*)
</UL>

<P><STRONG><a name="[7b]"></a>USART::USART(USART_TypeDef*)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usart.o(i._ZN5USARTC1EP13USART_TypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART::USART(USART_TypeDef*) &rArr; USART::init() &rArr; GPIO::ConfigGPIOPin()
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::init()
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b3]"></a>USART::USART__sub_object(USART_TypeDef*)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, usart.o(i._ZN5USARTC1EP13USART_TypeDef), UNUSED)

<P><STRONG><a name="[7c]"></a>Encoder::GetEncSpeed()</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, encoder.o(i._ZN7Encoder11GetEncSpeedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Encoder::GetEncSpeed()
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::GetTim()
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7d]"></a>Encoder::GetEncTicks()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, encoder.o(i._ZN7Encoder11GetEncTicksEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Encoder::GetEncTicks()
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::GetTim()
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7e]"></a>Encoder::ConfigEncoder()</STRONG> (Thumb, 592 bytes, Stack size 16 bytes, encoder.o(i._ZN7Encoder13ConfigEncoderEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Encoder::ConfigEncoder() &rArr; GPIO::ConfigGPIOPin()
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::GetTim()
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::SetGPIOPortPin(GPIO_IO_ENUM)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::ConfigGPIOPin()
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::SetGPIOMode(GPIO_MODES)
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::Encoder(TIM_TypeDef*)
</UL>

<P><STRONG><a name="[57]"></a>Encoder::Encoder_Handler(ENCODER_ENUM)</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, encoder.o(i._ZN7Encoder15Encoder_HandlerE12ENCODER_ENUM))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Encoder::Encoder_Handler(ENCODER_ENUM)
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::GetTime_usec()
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_IRQHandler
</UL>

<P><STRONG><a name="[84]"></a>Encoder::Encoder_Initiallize()</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, encoder.o(i._ZN7Encoder19Encoder_InitiallizeEv))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[56]"></a>Encoder::Encoder_Ticks_overflow(TIM_TypeDef*)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, encoder.o(i._ZN7Encoder22Encoder_Ticks_overflowEP11TIM_TypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_IRQHandler
</UL>

<P><STRONG><a name="[7f]"></a>Encoder::Encoder(TIM_TypeDef*)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, encoder.o(i._ZN7EncoderC1EP11TIM_TypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Encoder::Encoder(TIM_TypeDef*) &rArr; Encoder::ConfigEncoder() &rArr; GPIO::ConfigGPIOPin()
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::ConfigEncoder()
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::SetTim(TIM_TypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b4]"></a>Encoder::Encoder__sub_object(TIM_TypeDef*)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, encoder.o(i._ZN7EncoderC1EP11TIM_TypeDef), UNUSED)

<P><STRONG><a name="[82]"></a>SysClock::SysTickInit(SysTickBaseTimeEnum)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sysclock.o(i._ZN8SysClock11SysTickInitE19SysTickBaseTimeEnum))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClock::SysClock()
</UL>

<P><STRONG><a name="[81]"></a>SysClock::SysClockInit()</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, sysclock.o(i._ZN8SysClock12SysClockInitEv))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClock::SysClock()
</UL>

<P><STRONG><a name="[80]"></a>SysClock::SysClock()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sysclock.o(i._ZN8SysClockC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysClock::SysClock()
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClock::SysClockInit()
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClock::SysTickInit(SysTickBaseTimeEnum)
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b5]"></a>SysClock::SysClock__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, sysclock.o(i._ZN8SysClockC1Ev), UNUSED)

<P><STRONG><a name="[5a]"></a>__aeabi_vec_ctor_nocookie_nodtor</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, aeabi_vec_ctor_nocookie_nodtor.o(i.__aeabi_vec_ctor_nocookie_nodtor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_Sensor::Line_Sensor(ADC_CHANNELS, ADC_CHANNELS, ADC_CHANNELS, ADC_CHANNELS, ADC_CHANNELS, ADC_CHANNELS, ADC_CHANNELS, ADC_CHANNELS)
</UL>

<P><STRONG><a name="[3f]"></a>main</STRONG> (Thumb, 358 bytes, Stack size 496 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = main &rArr; Line_Sensor::Line_Sensor(ADC_CHANNELS, ADC_CHANNELS, ADC_CHANNELS, ADC_CHANNELS, ADC_CHANNELS, ADC_CHANNELS, ADC_CHANNELS, ADC_CHANNELS) &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_Sensor::Line_Sensor(ADC_CHANNELS, ADC_CHANNELS, ADC_CHANNELS, ADC_CHANNELS, ADC_CHANNELS, ADC_CHANNELS, ADC_CHANNELS, ADC_CHANNELS)
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::USART(USART_TypeDef*)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::Send_Vec_16(unsigned short*, unsigned short)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::Encoder(TIM_TypeDef*)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::Encoder_Initiallize()
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::GetEncTicks()
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::GetEncSpeed()
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::PWM(TIM_TypeDef*, TIM_CHANNELS, TIM_REMAP)
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::PWMWrite(unsigned short)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::Timer(TIM_TypeDef*, TIM_MODE)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::Timer_Initiallize()
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::GetTime_usec()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClock::SysClock()
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::GPIO(GPIO_IO_ENUM, GPIO_MODES)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::digitalWrite(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.text)
</UL><P>
<H3>
Local Symbols
</H3><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
