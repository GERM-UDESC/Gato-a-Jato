<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\LineFollower.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\LineFollower.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6090000: Last Updated: Tue Mar 26 17:12:35 2019
<BR><P>
<H3>Maximum Stack Usage =       2064 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; Line_Sensor::Line_Sensor(Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[3f]">Reset_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">NMI_Handler</a><BR>
 <LI><a href="#[5]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">HardFault_Handler</a><BR>
 <LI><a href="#[6]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">MemManage_Handler</a><BR>
 <LI><a href="#[7]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">BusFault_Handler</a><BR>
 <LI><a href="#[8]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">UsageFault_Handler</a><BR>
 <LI><a href="#[9]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SVC_Handler</a><BR>
 <LI><a href="#[a]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">DebugMon_Handler</a><BR>
 <LI><a href="#[b]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">PendSV_Handler</a><BR>
 <LI><a href="#[c]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">SysTick_Handler</a><BR>
 <LI><a href="#[1f]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1f]">ADC1_2_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[7]">BusFault_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[22]">CAN1_RX1_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[23]">CAN1_SCE_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[18]">DMA1_Channel1_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[19]">DMA1_Channel2_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel3_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel4_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1c]">DMA1_Channel5_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1d]">DMA1_Channel6_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1e]">DMA1_Channel7_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[a]">DebugMon_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[13]">EXTI0_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[35]">EXTI15_10_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[14]">EXTI1_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[15]">EXTI2_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[16]">EXTI3_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[17]">EXTI4_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[24]">EXTI9_5_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[11]">FLASH_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[5]">HardFault_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[2d]">I2C1_ER_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[2c]">I2C1_EV_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[2f]">I2C2_ER_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[2e]">I2C2_EV_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[6]">MemManage_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[4]">NMI_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[e]">PVD_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[12]">RCC_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[36]">RTCAlarm_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[10]">RTC_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[3f]">Reset_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[30]">SPI1_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[31]">SPI2_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[c]">SysTick_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[f]">TAMPER_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[25]">TIM1_BRK_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[28]">TIM1_CC_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[27]">TIM1_TRG_COM_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[26]">TIM1_UP_IRQHandler</a> from testes.o(.text.TIM1_UP_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[29]">TIM2_IRQHandler</a> from testes.o(.text.TIM2_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[2a]">TIM3_IRQHandler</a> from testes.o(.text.TIM3_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[2b]">TIM4_IRQHandler</a> from testes.o(.text.TIM4_IRQHandler) referenced from startup.o(RESET)
 <LI><a href="#[32]">USART1_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[33]">USART2_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[34]">USART3_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[37]">USBWakeUp_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[20]">USB_HP_CAN1_TX_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[21]">USB_LP_CAN1_RX0_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[8]">UsageFault_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[d]">WWDG_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[3d]">Reflectance_Sensor::Reflectance_Sensor(ADC_CHANNELS)</a> from reflectance_sensor.o(.text._ZN18Reflectance_SensorC2E12ADC_CHANNELS) referenced from testes.o(.text.main)
 <LI><a href="#[3a]">Reflectance_Sensor::Reflectance_Sensor(Reflectance_Sensor*)</a> from reflectance_sensor.o(.text._ZN18Reflectance_SensorC2EPS_) referenced from line_sensor.o(.text._ZN11Line_SensorC2E18Reflectance_SensorS0_S0_S0_S0_S0_S0_S0_)
 <LI><a href="#[3c]">GPIO::GPIO(GPIO_IO_ENUM, GPIO_MODES)</a> from gpio_1.o(.text._ZN4GPIOC2E12GPIO_IO_ENUM10GPIO_MODES) referenced from testes.o(.text.main)
 <LI><a href="#[3b]">Timer::GetTim()</a> from timer.o(.text._ZN5Timer6GetTimEv) referenced from pwm.o(.text._ZN3PWM7PWMInitEv)
 <LI><a href="#[3b]">Timer::GetTim()</a> from timer.o(.text._ZN5Timer6GetTimEv) referenced from encoder.o(.text._ZN7Encoder13ConfigEncoderEv)
 <LI><a href="#[3e]">USART::sendFloat(float*)</a> from usart.o(.text._ZN5USART9sendFloatEPf) referenced from testes.o(.text.main)
 <LI><a href="#[39]">__I$use$semihosting</a> from use_no_semi.o(.text) referenced from sys_stackheap.o(.text)
 <LI><a href="#[38]">main</a> from testes.o(.text.main) referenced from startup.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[40]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[41]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[43]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[b5]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[b6]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[44]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[b7]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[48]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[b8]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[b9]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[ba]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[bb]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[bc]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[bd]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[be]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[bf]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[c0]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[c1]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[c2]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[c3]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[c4]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[c5]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[c6]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[c7]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[c8]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[c9]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[ca]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[cb]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[cc]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[4c]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[cd]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[ce]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[cf]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[d0]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[d1]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[d2]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[d3]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[42]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[d4]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[45]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap &rArr; __user_initial_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[47]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[d5]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[49]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 2064 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; Line_Sensor::Line_Sensor(Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor)
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[d6]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[51]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[4b]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[d7]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[4d]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[3f]"></a>Reset_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text))

<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[d8]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[4f]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[d9]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[39]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sys_stackheap.o(.text)
</UL>
<P><STRONG><a name="[da]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[db]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[46]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __user_setup_stackheap &rArr; __user_initial_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[4a]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[50]"></a>__user_initial_stackheap</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, sys_stackheap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[26]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, testes.o(.text.TIM1_UP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM1_UP_IRQHandler &rArr; Encoder::Encoder_Handler(ENCODER_ENUM) &rArr; Encoder::Handler() &rArr; __aeabi_fsub
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::Encoder_Handler(ENCODER_ENUM)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM2_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, testes.o(.text.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TIM2_IRQHandler &rArr; Motor::Motor_Handler_by_time() &rArr; Motor::Handler() &rArr; PWM::PWMWrite(float) &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::Timer_Handler()
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::Encoder_Handler_by_Time()
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor_Handler_by_time()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM3_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, testes.o(.text.TIM3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM4_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, testes.o(.text.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM4_IRQHandler &rArr; Encoder::Encoder_Handler(ENCODER_ENUM) &rArr; Encoder::Handler() &rArr; __aeabi_fsub
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::Encoder_Handler(ENCODER_ENUM)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>Line_Sensor::Line_Sensor(Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor)</STRONG> (Thumb, 264 bytes, Stack size 208 bytes, line_sensor.o(.text._ZN11Line_SensorC2E18Reflectance_SensorS0_S0_S0_S0_S0_S0_S0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Line_Sensor::Line_Sensor(Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor)
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dc]"></a>Line_Sensor::Line_Sensor__sub_object(Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor)</STRONG> (Thumb, 264 bytes, Stack size 208 bytes, line_sensor.o(.text._ZN11Line_SensorC2E18Reflectance_SensorS0_S0_S0_S0_S0_S0_S0_), UNUSED)

<P><STRONG><a name="[3d]"></a>Reflectance_Sensor::Reflectance_Sensor(ADC_CHANNELS)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, reflectance_sensor.o(.text._ZN18Reflectance_SensorC2E12ADC_CHANNELS))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Reflectance_Sensor::Reflectance_Sensor(ADC_CHANNELS) &rArr; ADC::ADC__sub_object(ADC_CHANNELS)
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC::ADC__sub_object(ADC_CHANNELS)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testes.o(.text.main)
</UL>
<P><STRONG><a name="[dd]"></a>Reflectance_Sensor::Reflectance_Sensor__sub_object(ADC_CHANNELS)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, reflectance_sensor.o(.text._ZN18Reflectance_SensorC2E12ADC_CHANNELS), UNUSED)

<P><STRONG><a name="[3a]"></a>Reflectance_Sensor::Reflectance_Sensor(Reflectance_Sensor*)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, reflectance_sensor.o(.text._ZN18Reflectance_SensorC2EPS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Reflectance_Sensor::Reflectance_Sensor(Reflectance_Sensor*) &rArr; ADC::ADC__sub_object(ADC_CHANNELS)
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC::ADC__sub_object(ADC_CHANNELS)
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC::GetADCChannel()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> line_sensor.o(.text._ZN11Line_SensorC2E18Reflectance_SensorS0_S0_S0_S0_S0_S0_S0_)
</UL>
<P><STRONG><a name="[de]"></a>Reflectance_Sensor::Reflectance_Sensor__sub_object(Reflectance_Sensor*)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, reflectance_sensor.o(.text._ZN18Reflectance_SensorC2EPS_), UNUSED)

<P><STRONG><a name="[5c]"></a>ADC::ADCCalibrate()</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, adc.o(.text._ZN3ADC12ADCCalibrateEv), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC::ConfigADCPin()
</UL>

<P><STRONG><a name="[58]"></a>ADC::ConfigADCPin()</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, adc.o(.text._ZN3ADC12ConfigADCPinEv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::SetGPIOPortPin(GPIO_IO_ENUM)
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::ConfigGPIOPin()
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::SetGPIOMode(GPIO_MODES)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC::ADCCalibrate()
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC::ADC(ADC_CHANNELS)
</UL>

<P><STRONG><a name="[57]"></a>ADC::GetADCChannel()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, adc.o(.text._ZN3ADC13GetADCChannelEv))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reflectance_Sensor::Reflectance_Sensor(Reflectance_Sensor*)
</UL>

<P><STRONG><a name="[5d]"></a>ADC::ADC(ADC_CHANNELS)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, adc.o(.text._ZN3ADCC2E12ADC_CHANNELS), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC::ConfigADCPin()
</UL>

<P><STRONG><a name="[56]"></a>ADC::ADC__sub_object(ADC_CHANNELS)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, adc.o(.text._ZN3ADCC2E12ADC_CHANNELS))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC::ADC__sub_object(ADC_CHANNELS)
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reflectance_Sensor::Reflectance_Sensor(ADC_CHANNELS)
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reflectance_Sensor::Reflectance_Sensor(Reflectance_Sensor*)
</UL>

<P><STRONG><a name="[5e]"></a>PWM::ConfigPWMPin()</STRONG> (Thumb, 500 bytes, Stack size 16 bytes, pwm.o(.text._ZN3PWM12ConfigPWMPinEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PWM::ConfigPWMPin() &rArr; GPIO::ConfigGPIOPin()
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::GetTim()
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::GetTIMChannel()
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::GetTIMRemap()
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::SetGPIOPortPin(GPIO_IO_ENUM)
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::ConfigGPIOPin()
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::SetGPIOMode(GPIO_MODES)
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::PWM(PWM*)
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::PWM(TIM_TypeDef*, TIM_CHANNELS, TIM_REMAP)
</UL>

<P><STRONG><a name="[61]"></a>PWM::PWMInit()</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, pwm.o(.text._ZN3PWM7PWMInitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PWM::PWMInit()
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::GetTim()
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::GetTIMChannel()
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::PWM(PWM*)
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::PWM(TIM_TypeDef*, TIM_CHANNELS, TIM_REMAP)
</UL>

<P><STRONG><a name="[62]"></a>PWM::PWMWrite(float)</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, pwm.o(.text._ZN3PWM8PWMWriteEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PWM::PWMWrite(float) &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmplt
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpge
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpgt
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Handler()
</UL>

<P><STRONG><a name="[69]"></a>PWM::PWM(TIM_TypeDef*, TIM_CHANNELS, TIM_REMAP)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, pwm.o(.text._ZN3PWMC2EP11TIM_TypeDef12TIM_CHANNELS9TIM_REMAP))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PWM::PWM(TIM_TypeDef*, TIM_CHANNELS, TIM_REMAP) &rArr; PWM::ConfigPWMPin() &rArr; GPIO::ConfigGPIOPin()
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::Timer__sub_object(TIM_TypeDef*, TIM_CHANNELS, TIM_MODE)
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::SetTIMRemap(TIM_REMAP)
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::PWMInit()
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::ConfigPWMPin()
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[df]"></a>PWM::PWM__sub_object(TIM_TypeDef*, TIM_CHANNELS, TIM_REMAP)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, pwm.o(.text._ZN3PWMC2EP11TIM_TypeDef12TIM_CHANNELS9TIM_REMAP), UNUSED)

<P><STRONG><a name="[6c]"></a>PWM::PWM(PWM*)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, pwm.o(.text._ZN3PWMC2EPS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PWM::PWM(PWM*) &rArr; PWM::ConfigPWMPin() &rArr; GPIO::ConfigGPIOPin()
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::Timer__sub_object(TIM_TypeDef*, TIM_CHANNELS, TIM_MODE)
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::GetTim()
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::GetTIMChannel()
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::SetTIMRemap(TIM_REMAP)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::GetTIMRemap()
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::PWMInit()
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::ConfigPWMPin()
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor(PWM, Encoder, GPIO, GPIO)
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor(Motor*)
</UL>

<P><STRONG><a name="[e0]"></a>PWM::PWM__sub_object(PWM*)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, pwm.o(.text._ZN3PWMC2EPS_), UNUSED)

<P><STRONG><a name="[5a]"></a>GPIO::SetGPIOMode(GPIO_MODES)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gpio_1.o(.text._ZN4GPIO11SetGPIOModeE10GPIO_MODES))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::ConfigEncoder()
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC::ConfigADCPin()
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::ConfigPWMPin()
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::init(BD_ENUM)
</UL>

<P><STRONG><a name="[76]"></a>GPIO::digitalWrite(bool)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gpio_1.o(.text._ZN4GPIO12digitalWriteEb))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Handler()
</UL>

<P><STRONG><a name="[5b]"></a>GPIO::ConfigGPIOPin()</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, gpio_1.o(.text._ZN4GPIO13ConfigGPIOPinEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO::ConfigGPIOPin()
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::GPIO(GPIO*)
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::GPIO(GPIO_IO_ENUM, GPIO_MODES)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::ConfigEncoder()
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC::ConfigADCPin()
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::ConfigPWMPin()
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::init(BD_ENUM)
</UL>

<P><STRONG><a name="[59]"></a>GPIO::SetGPIOPortPin(GPIO_IO_ENUM)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gpio_1.o(.text._ZN4GPIO14SetGPIOPortPinE12GPIO_IO_ENUM))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::ConfigEncoder()
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC::ConfigADCPin()
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::ConfigPWMPin()
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::init(BD_ENUM)
</UL>

<P><STRONG><a name="[3c]"></a>GPIO::GPIO(GPIO_IO_ENUM, GPIO_MODES)</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, gpio_1.o(.text._ZN4GPIOC2E12GPIO_IO_ENUM10GPIO_MODES))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO::GPIO(GPIO_IO_ENUM, GPIO_MODES) &rArr; GPIO::ConfigGPIOPin()
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::ConfigGPIOPin()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testes.o(.text.main)
</UL>
<P><STRONG><a name="[e1]"></a>GPIO::GPIO__sub_object(GPIO_IO_ENUM, GPIO_MODES)</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, gpio_1.o(.text._ZN4GPIOC2E12GPIO_IO_ENUM10GPIO_MODES), UNUSED)

<P><STRONG><a name="[6d]"></a>GPIO::GPIO(GPIO*)</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, gpio_1.o(.text._ZN4GPIOC2EPS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO::GPIO(GPIO*) &rArr; GPIO::ConfigGPIOPin()
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::ConfigGPIOPin()
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor(PWM, Encoder, GPIO, GPIO)
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor(Motor*)
</UL>

<P><STRONG><a name="[e2]"></a>GPIO::GPIO__sub_object(GPIO*)</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, gpio_1.o(.text._ZN4GPIOC2EPS_), UNUSED)

<P><STRONG><a name="[92]"></a>Motor::Motor_Initialiize()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, motor.o(.text._ZN5Motor17Motor_InitialiizeEv))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[55]"></a>Motor::Motor_Handler_by_time()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, motor.o(.text._ZN5Motor21Motor_Handler_by_timeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Motor::Motor_Handler_by_time() &rArr; Motor::Handler() &rArr; PWM::PWMWrite(float) &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Handler()
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[97]"></a>Motor::getU()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, motor.o(.text._ZN5Motor4getUEv))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6e]"></a>Motor::Handler()</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, motor.o(.text._ZN5Motor7HandlerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Motor::Handler() &rArr; PWM::PWMWrite(float) &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::digitalWrite(bool)
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::PWMWrite(float)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Get_Speed()
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmplt
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmple
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpge
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor_Handler_by_time()
</UL>

<P><STRONG><a name="[6f]"></a>Motor::Get_Speed()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, motor.o(.text._ZN5Motor9Get_SpeedEv))
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::getSpeed()
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Handler()
</UL>

<P><STRONG><a name="[8e]"></a>Motor::Set_Speed(float)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, motor.o(.text._ZN5Motor9Set_SpeedEf))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic::setRobotSpeed(float, float)
</UL>

<P><STRONG><a name="[79]"></a>Motor::Motor(PWM, Encoder, GPIO, GPIO)</STRONG> (Thumb, 276 bytes, Stack size 144 bytes, motor.o(.text._ZN5MotorC2E3PWM7Encoder4GPIOS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Motor::Motor(PWM, Encoder, GPIO, GPIO) &rArr; Encoder::Encoder(Encoder*) &rArr; Encoder::ConfigEncoder() &rArr; GPIO::ConfigGPIOPin()
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::GetTim()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::GPIO(GPIO*)
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::Encoder(Encoder*)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::PWM(PWM*)
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e3]"></a>Motor::Motor__sub_object(PWM, Encoder, GPIO, GPIO)</STRONG> (Thumb, 276 bytes, Stack size 144 bytes, motor.o(.text._ZN5MotorC2E3PWM7Encoder4GPIOS2_), UNUSED)

<P><STRONG><a name="[7b]"></a>Motor::Motor(Motor*)</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, motor.o(.text._ZN5MotorC2EPS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Motor::Motor(Motor*) &rArr; Encoder::Encoder(Encoder*) &rArr; Encoder::ConfigEncoder() &rArr; GPIO::ConfigGPIOPin()
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::GPIO(GPIO*)
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::Encoder(Encoder*)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::PWM(PWM*)
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic::Kinematic(Motor, Motor)
</UL>

<P><STRONG><a name="[e4]"></a>Motor::Motor__sub_object(Motor*)</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, motor.o(.text._ZN5MotorC2EPS_), UNUSED)

<P><STRONG><a name="[60]"></a>Timer::GetTIMRemap()</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, timer.o(.text._ZN5Timer11GetTIMRemapEv))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::PWM(PWM*)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::ConfigPWMPin()
</UL>

<P><STRONG><a name="[6b]"></a>Timer::SetTIMRemap(TIM_REMAP)</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, timer.o(.text._ZN5Timer11SetTIMRemapE9TIM_REMAP))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::PWM(PWM*)
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::PWM(TIM_TypeDef*, TIM_CHANNELS, TIM_REMAP)
</UL>

<P><STRONG><a name="[84]"></a>Timer::GetTime_usec()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer.o(.text._ZN5Timer12GetTime_usecEv))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::Handler()
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::Encoder_Handler_by_Time()
</UL>

<P><STRONG><a name="[5f]"></a>Timer::GetTIMChannel()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timer.o(.text._ZN5Timer13GetTIMChannelEv))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::PWM(PWM*)
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::PWMInit()
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::ConfigPWMPin()
</UL>

<P><STRONG><a name="[53]"></a>Timer::Timer_Handler()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer.o(.text._ZN5Timer13Timer_HandlerEv))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[90]"></a>Timer::Timer_Initiallize()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer.o(.text._ZN5Timer17Timer_InitiallizeEv))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3b]"></a>Timer::GetTim()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timer.o(.text._ZN5Timer6GetTimEv))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::Encoder(Encoder*)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::ConfigEncoder()
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::getDirection()
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::PWM(PWM*)
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::PWMInit()
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::ConfigPWMPin()
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor(PWM, Encoder, GPIO, GPIO)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> encoder.o(.text._ZN7Encoder13ConfigEncoderEv)
<LI> pwm.o(.text._ZN3PWM7PWMInitEv)
</UL>
<P><STRONG><a name="[88]"></a>Timer::SetTim(TIM_TypeDef*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timer.o(.text._ZN5Timer6SetTimEP11TIM_TypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::Encoder(Encoder*)
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::Encoder(TIM_TypeDef*)
</UL>

<P><STRONG><a name="[7d]"></a>Timer::TimerInit()</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, timer.o(.text._ZN5Timer9TimerInitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Timer::TimerInit()
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::Timer(TIM_TypeDef*, TIM_MODE)
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::Timer(TIM_TypeDef*, TIM_CHANNELS, TIM_MODE)
</UL>

<P><STRONG><a name="[7c]"></a>Timer::Timer(TIM_TypeDef*, TIM_CHANNELS, TIM_MODE)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, timer.o(.text._ZN5TimerC2EP11TIM_TypeDef12TIM_CHANNELS8TIM_MODE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::TimerInit()
</UL>

<P><STRONG><a name="[6a]"></a>Timer::Timer__sub_object(TIM_TypeDef*, TIM_CHANNELS, TIM_MODE)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, timer.o(.text._ZN5TimerC2EP11TIM_TypeDef12TIM_CHANNELS8TIM_MODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timer::Timer__sub_object(TIM_TypeDef*, TIM_CHANNELS, TIM_MODE)
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::PWM(PWM*)
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::PWM(TIM_TypeDef*, TIM_CHANNELS, TIM_REMAP)
</UL>

<P><STRONG><a name="[7e]"></a>Timer::Timer(TIM_TypeDef*, TIM_MODE)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, timer.o(.text._ZN5TimerC2EP11TIM_TypeDef8TIM_MODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Timer::Timer(TIM_TypeDef*, TIM_MODE) &rArr; Timer::TimerInit()
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::TimerInit()
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e5]"></a>Timer::Timer__sub_object(TIM_TypeDef*, TIM_MODE)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, timer.o(.text._ZN5TimerC2EP11TIM_TypeDef8TIM_MODE), UNUSED)

<P><STRONG><a name="[7f]"></a>USART::init(BD_ENUM)</STRONG> (Thumb, 320 bytes, Stack size 16 bytes, usart.o(.text._ZN5USART4initE7BD_ENUM))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART::init(BD_ENUM) &rArr; GPIO::ConfigGPIOPin()
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::SetGPIOPortPin(GPIO_IO_ENUM)
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::ConfigGPIOPin()
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::SetGPIOMode(GPIO_MODES)
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::USART(USART_TypeDef*, BD_ENUM)
</UL>

<P><STRONG><a name="[94]"></a>USART::Receive()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usart.o(.text._ZN5USART7ReceiveEv))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[95]"></a>USART::Available()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usart.o(.text._ZN5USART9AvailableEv))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3e]"></a>USART::sendFloat(float*)</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, usart.o(.text._ZN5USART9sendFloatEPf))
<BR>[Address Reference Count : 1]<UL><LI> testes.o(.text.main)
</UL>
<P><STRONG><a name="[80]"></a>USART::USART(USART_TypeDef*, BD_ENUM)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usart.o(.text._ZN5USARTC2EP13USART_TypeDef7BD_ENUM))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART::USART(USART_TypeDef*, BD_ENUM) &rArr; USART::init(BD_ENUM) &rArr; GPIO::ConfigGPIOPin()
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::init(BD_ENUM)
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e6]"></a>USART::USART__sub_object(USART_TypeDef*, BD_ENUM)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usart.o(.text._ZN5USARTC2EP13USART_TypeDef7BD_ENUM), UNUSED)

<P><STRONG><a name="[81]"></a>Encoder::getDirection()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, encoder.o(.text._ZN7Encoder12getDirectionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Encoder::getDirection()
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::GetTim()
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::Handler()
</UL>

<P><STRONG><a name="[82]"></a>Encoder::ConfigEncoder()</STRONG> (Thumb, 568 bytes, Stack size 24 bytes, encoder.o(.text._ZN7Encoder13ConfigEncoderEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Encoder::ConfigEncoder() &rArr; GPIO::ConfigGPIOPin()
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::GetTim()
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::SetGPIOPortPin(GPIO_IO_ENUM)
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::ConfigGPIOPin()
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::SetGPIOMode(GPIO_MODES)
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::Encoder(Encoder*)
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::Encoder(TIM_TypeDef*)
</UL>

<P><STRONG><a name="[52]"></a>Encoder::Encoder_Handler(ENCODER_ENUM)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, encoder.o(.text._ZN7Encoder15Encoder_HandlerE12ENCODER_ENUM))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Encoder::Encoder_Handler(ENCODER_ENUM) &rArr; Encoder::Handler() &rArr; __aeabi_fsub
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::Handler()
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_IRQHandler
</UL>

<P><STRONG><a name="[91]"></a>Encoder::Encoder_Initiallize()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, encoder.o(.text._ZN7Encoder19Encoder_InitiallizeEv))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[54]"></a>Encoder::Encoder_Handler_by_Time()</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, encoder.o(.text._ZN7Encoder23Encoder_Handler_by_TimeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Encoder::Encoder_Handler_by_Time() &rArr; __aeabi_fcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::GetTime_usec()
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[83]"></a>Encoder::Handler()</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, encoder.o(.text._ZN7Encoder7HandlerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Encoder::Handler() &rArr; __aeabi_fsub
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::GetTime_usec()
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::getDirection()
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::Encoder_Handler(ENCODER_ENUM)
</UL>

<P><STRONG><a name="[78]"></a>Encoder::getSpeed()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, encoder.o(.text._ZN7Encoder8getSpeedEv))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Get_Speed()
</UL>

<P><STRONG><a name="[87]"></a>Encoder::Encoder(TIM_TypeDef*)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, encoder.o(.text._ZN7EncoderC2EP11TIM_TypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Encoder::Encoder(TIM_TypeDef*) &rArr; Encoder::ConfigEncoder() &rArr; GPIO::ConfigGPIOPin()
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::SetTim(TIM_TypeDef*)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::ConfigEncoder()
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e7]"></a>Encoder::Encoder__sub_object(TIM_TypeDef*)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, encoder.o(.text._ZN7EncoderC2EP11TIM_TypeDef), UNUSED)

<P><STRONG><a name="[7a]"></a>Encoder::Encoder(Encoder*)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, encoder.o(.text._ZN7EncoderC2EPS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Encoder::Encoder(Encoder*) &rArr; Encoder::ConfigEncoder() &rArr; GPIO::ConfigGPIOPin()
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::SetTim(TIM_TypeDef*)
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::GetTim()
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::ConfigEncoder()
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor(PWM, Encoder, GPIO, GPIO)
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor(Motor*)
</UL>

<P><STRONG><a name="[e8]"></a>Encoder::Encoder__sub_object(Encoder*)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, encoder.o(.text._ZN7EncoderC2EPS_), UNUSED)

<P><STRONG><a name="[8a]"></a>SysClock::SysClockInit()</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, sysclock.o(.text._ZN8SysClock12SysClockInitEv))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClock::SysClock()
</UL>

<P><STRONG><a name="[89]"></a>SysClock::SysClock()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sysclock.o(.text._ZN8SysClockC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysClock::SysClock()
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClock::SysClockInit()
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e9]"></a>SysClock::SysClock__sub_object()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sysclock.o(.text._ZN8SysClockC2Ev), UNUSED)

<P><STRONG><a name="[8b]"></a>Kinematic::setRobotSpeed(float, float)</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, kinematic_control.o(.text._ZN9Kinematic13setRobotSpeedEff))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Kinematic::setRobotSpeed(float, float) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Set_Speed(float)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8f]"></a>Kinematic::Kinematic(Motor, Motor)</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, kinematic_control.o(.text._ZN9KinematicC2E5MotorS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Kinematic::Kinematic(Motor, Motor) &rArr; Motor::Motor(Motor*) &rArr; Encoder::Encoder(Encoder*) &rArr; Encoder::ConfigEncoder() &rArr; GPIO::ConfigGPIOPin()
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor(Motor*)
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ea]"></a>Kinematic::Kinematic__sub_object(Motor, Motor)</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, kinematic_control.o(.text._ZN9KinematicC2E5MotorS0_), UNUSED)

<P><STRONG><a name="[38]"></a>main</STRONG> (Thumb, 1428 bytes, Stack size 1856 bytes, testes.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 2064<LI>Call Chain = main &rArr; Line_Sensor::Line_Sensor(Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor)
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::Timer(TIM_TypeDef*, TIM_MODE)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::Timer_Initiallize()
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer::GetTime_usec()
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClock::SysClock()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO::digitalWrite(bool)
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::Encoder(TIM_TypeDef*)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::Encoder_Initiallize()
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::PWM(TIM_TypeDef*, TIM_CHANNELS, TIM_REMAP)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic::Kinematic(Motor, Motor)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic::setRobotSpeed(float, float)
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor(PWM, Encoder, GPIO, GPIO)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Get_Speed()
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::getU()
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor_Initialiize()
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_Sensor::Line_Sensor(Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor, Reflectance_Sensor)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::USART(USART_TypeDef*, BD_ENUM)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::Available()
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART::Receive()
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.text)
</UL>
<P><STRONG><a name="[75]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic::setRobotSpeed(float, float)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Handler()
</UL>

<P><STRONG><a name="[98]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[73]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic::setRobotSpeed(float, float)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Handler()
</UL>

<P><STRONG><a name="[9b]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[8c]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic::setRobotSpeed(float, float)
</UL>

<P><STRONG><a name="[9e]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[72]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic::setRobotSpeed(float, float)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Handler()
</UL>

<P><STRONG><a name="[9f]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[9a]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[9d]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[8d]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic::setRobotSpeed(float, float)
</UL>

<P><STRONG><a name="[a0]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[71]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kinematic::setRobotSpeed(float, float)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Handler()
</UL>

<P><STRONG><a name="[a2]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[74]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Handler()
</UL>

<P><STRONG><a name="[a4]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[85]"></a>__aeabi_fcmpeq</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::Encoder_Handler_by_Time()
</UL>

<P><STRONG><a name="[a6]"></a>_feq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
</UL>

<P><STRONG><a name="[a8]"></a>_fneq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
</UL>

<P><STRONG><a name="[63]"></a>__aeabi_fcmpgt</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fcmpgt
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::PWMWrite(float)
</UL>

<P><STRONG><a name="[a9]"></a>_fgr</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpge
</UL>

<P><STRONG><a name="[68]"></a>__aeabi_fcmpge</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fcmpge
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::PWMWrite(float)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Handler()
</UL>

<P><STRONG><a name="[ab]"></a>_fgeq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpge
</UL>

<P><STRONG><a name="[77]"></a>__aeabi_fcmple</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Handler()
</UL>

<P><STRONG><a name="[ac]"></a>_fleq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[64]"></a>__aeabi_fcmplt</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fcmplt
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::PWMWrite(float)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Handler()
</UL>

<P><STRONG><a name="[ae]"></a>_fls</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[b0]"></a>__fpl_fcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fcmpi.o(x$fpl$fcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpge
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
</UL>

<P><STRONG><a name="[66]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::PWMWrite(float)
</UL>

<P><STRONG><a name="[af]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[eb]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, feqf.o(x$fpl$feqf), UNUSED)

<P><STRONG><a name="[a7]"></a>_fcmpeq</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, feqf.o(x$fpl$feqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fneq
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_feq
</UL>

<P><STRONG><a name="[67]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::PWMWrite(float)
</UL>

<P><STRONG><a name="[b1]"></a>_ffixu</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[96]"></a>__aeabi_i2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ec]"></a>_fflt</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[86]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::Handler()
</UL>

<P><STRONG><a name="[ed]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[aa]"></a>_fcmpge</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fgeqf.o(x$fpl$fgeqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fgeq
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fgr
</UL>

<P><STRONG><a name="[ee]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)

<P><STRONG><a name="[ad]"></a>_fcmple</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fls
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fleq
</UL>

<P><STRONG><a name="[ef]"></a>__fpl_fcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fleqf.o(x$fpl$fleqf), UNUSED)

<P><STRONG><a name="[65]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM::PWMWrite(float)
</UL>

<P><STRONG><a name="[b2]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[a3]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpge
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[99]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[70]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder::Handler()
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Handler()
</UL>

<P><STRONG><a name="[b3]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[a1]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
</UL>

<P><STRONG><a name="[9c]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[b4]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
</UL>

<P><STRONG><a name="[a5]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
